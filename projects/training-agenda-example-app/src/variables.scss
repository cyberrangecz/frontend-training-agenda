@use '@angular/material' as mat;
@use "theme" as theme;

/// A mixin to generate CSS variables for specific theme colors and shades.
/// @param $prefix - The prefix for the generated CSS variable (e.g., "primary", "accent").
/// @param $theme - The Angular Material theme object.
/// @param $shades - An array of color shades to extract (e.g., (50, 100, 200)).
@mixin generateColors($prefix, $theme, $shades) {
    :root {
        @each $shade in $shades {
            $color: mat.get-theme-color($theme, $prefix, $shade);

            @if $color != null {
                --app-#{$prefix}-#{$shade}: #{$color};
            } @else {
                @warn "Color shade #{$shade} not found for #{$prefix}.";
            }
        }
    }
}

// Define your Angular Material theme.
$theme: theme.$kypo-theme;

// Specify the shades you want to extract.
$shades: (0, 10, 20, 25, 30, 35, 40, 50, 60, 70, 80, 90, 95, 98, 99, 100);

// Generate CSS variables for primary, accent, and warning palettes.
@mixin generate-material-classes {
    @include generateColors('primary', $theme, $shades);
    @include generateColors('secondary', $theme, $shades);
    @include generateColors('tertiary', $theme, $shades);
    @include generateColors('neutral', $theme, $shades);
    @include generateColors('neutral-variant', $theme, $shades);
    @include generateColors('error', $theme, $shades);
}

// Include the mixin in your global styles.
@include generate-material-classes;
