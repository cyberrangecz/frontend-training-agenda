{"ast":null,"code":"import { TestBed } from '@angular/core/testing';\nimport { Router } from '@angular/router';\nimport { RouterTestingModule } from '@angular/router/testing';\nimport { asyncData } from '@sentinel/common';\nimport { SandboxInstanceApi } from '@muni-kypo-crp/sandbox-api';\nimport { TrainingInstanceApi } from '@muni-kypo-crp/training-api';\nimport { TrainingInstance } from '@muni-kypo-crp/training-model';\nimport { throwError } from 'rxjs';\nimport { TrainingInstanceChangeEvent } from '../../../model/events/training-instance-change-event';\nimport { createContext, createErrorHandlerSpy, createNavigatorSpy, createNotificationSpy, createRouterSpy, createSandboxInstanceApiSpy, createTrainingInstanceApiSpy } from '../../../../../internal/src/testing/testing-commons.spec';\nimport { TrainingErrorHandler } from '../../../../../src/services/training-error.handler.service';\nimport { TrainingNavigator } from '../../../../../src/services/training-navigator.service';\nimport { TrainingNotificationService } from '../../../../../src/services/training-notification.service';\nimport { TrainingAgendaContext } from '../../../../../internal/src/services/context/training-agenda-context.service';\nimport { TrainingInstanceEditConcreteService } from './training-instance-edit-concrete.service';\ndescribe('TrainingInstanceEditConcreteService', () => {\n  let errorHandlerSpy;\n  let trainingInstanceApiSpy;\n  let sandboxInstanceApiSpy;\n  let service;\n  let navigatorSpy;\n  let routerSpy;\n  let notificationSpy;\n  let context;\n  beforeEach(() => {\n    errorHandlerSpy = createErrorHandlerSpy();\n    notificationSpy = createNotificationSpy();\n    trainingInstanceApiSpy = createTrainingInstanceApiSpy();\n    sandboxInstanceApiSpy = createSandboxInstanceApiSpy();\n    navigatorSpy = createNavigatorSpy();\n    routerSpy = createRouterSpy();\n    context = createContext();\n    TestBed.configureTestingModule({\n      providers: [TrainingInstanceEditConcreteService, {\n        provide: TrainingInstanceApi,\n        useValue: trainingInstanceApiSpy\n      }, {\n        provide: SandboxInstanceApi,\n        useValue: sandboxInstanceApiSpy\n      }, {\n        provide: Router,\n        useValue: routerSpy\n      }, {\n        provide: TrainingErrorHandler,\n        useValue: errorHandlerSpy\n      }, {\n        provide: TrainingNotificationService,\n        useValue: notificationSpy\n      }, {\n        provide: TrainingNavigator,\n        useValue: navigatorSpy\n      }, {\n        provide: TrainingAgendaContext,\n        useValue: context\n      }],\n      imports: [RouterTestingModule]\n    });\n    service = TestBed.inject(TrainingInstanceEditConcreteService);\n  });\n  it('should be created', () => {\n    expect(service).toBeTruthy();\n  });\n  it('should set training instance as currently edited', () => {\n    const trainingInstance = createMock();\n    service.set(trainingInstance);\n    service.trainingInstance$.subscribe(ti => {\n      expect(ti).toEqual(trainingInstance);\n    });\n    service.editMode$.subscribe(isEdit => {\n      expect(isEdit).toBeTruthy();\n    });\n  });\n  it('should create new training instance if set is not called with one', () => {\n    service.set(null);\n    service.trainingInstance$.subscribe(ti => {\n      expect(ti).toBeTruthy();\n    });\n  });\n  it('should save existing training instance', done => {\n    trainingInstanceApiSpy.update.and.returnValue(asyncData(''));\n    service.set(createMock());\n    service.change(new TrainingInstanceChangeEvent(createMock(), true));\n    service.save().subscribe(res => {\n      expect(trainingInstanceApiSpy.update).toHaveBeenCalledTimes(1);\n      expect(notificationSpy.emit).toHaveBeenCalledTimes(1);\n      expect(notificationSpy.emit).toHaveBeenCalledWith('success', jasmine.anything());\n      expect(res).toEqual(0);\n      done();\n    }, () => fail);\n  });\n  it('should save new training instance', done => {\n    trainingInstanceApiSpy.create.and.returnValue(asyncData(createMock()));\n    routerSpy.navigate.and.returnValue(asyncData(true).toPromise());\n    service.save().subscribe(res => {\n      expect(trainingInstanceApiSpy.create).toHaveBeenCalledTimes(1);\n      expect(routerSpy.navigate).toHaveBeenCalledTimes(1);\n      expect(navigatorSpy.toTrainingInstanceOverview).toHaveBeenCalledTimes(1);\n      expect(notificationSpy.emit).toHaveBeenCalledWith('success', jasmine.anything());\n      expect(res).toEqual(true);\n      done();\n    }, () => fail);\n  });\n  it('should emit error when save existing training instance fails', done => {\n    trainingInstanceApiSpy.update.and.returnValue(throwError(null));\n    service.set(createMock());\n    service.save().subscribe(() => fail, err => {\n      expect(errorHandlerSpy.emit).toHaveBeenCalledTimes(1);\n      expect(errorHandlerSpy.emit).toHaveBeenCalledWith(err, jasmine.anything());\n      done();\n    });\n  });\n  it('should emit error when save new training instance fails', done => {\n    trainingInstanceApiSpy.create.and.returnValue(throwError(null));\n    routerSpy.navigate.and.returnValue(asyncData(true).toPromise());\n    service.save().subscribe(() => fail, err => {\n      expect(errorHandlerSpy.emit).toHaveBeenCalledTimes(1);\n      expect(errorHandlerSpy.emit).toHaveBeenCalledWith(err, jasmine.anything());\n      done();\n    });\n  });\n  it('should create training instance and stay on edit page', done => {\n    trainingInstanceApiSpy.create.and.returnValue(asyncData(createMock()));\n    routerSpy.navigate.and.returnValue(asyncData(true).toPromise());\n    service.createAndStay().subscribe(() => {\n      expect(trainingInstanceApiSpy.create).toHaveBeenCalledTimes(1);\n      expect(routerSpy.navigate).toHaveBeenCalledTimes(1);\n      expect(navigatorSpy.toTrainingInstanceEdit).toHaveBeenCalledTimes(1);\n      expect(notificationSpy.emit).toHaveBeenCalledWith('success', jasmine.anything());\n      done();\n    }, () => fail);\n  });\n  it('should emit error when create training instance and stay on edit page fails', done => {\n    trainingInstanceApiSpy.create.and.returnValue(throwError(null));\n    routerSpy.navigate.and.returnValue(asyncData(true).toPromise());\n    service.createAndStay().subscribe(() => fail, err => {\n      expect(errorHandlerSpy.emit).toHaveBeenCalledTimes(1);\n      expect(errorHandlerSpy.emit).toHaveBeenCalledWith(err, jasmine.anything());\n      done();\n    });\n  });\n  it('should update and save snapshot of edited training instance', () => {\n    service.change(new TrainingInstanceChangeEvent(createMock(), false));\n    service.saveDisabled$.subscribe(idDisabled => expect(idDisabled).toBeTruthy());\n  });\n\n  function createMock() {\n    const trainingInstance = new TrainingInstance();\n    trainingInstance.id = 0;\n    trainingInstance.startTime = new Date();\n    return trainingInstance;\n  }\n});","map":{"version":3,"sources":["/home/dominik/Desktop/Workspace/FRONTEND/kypo-training-agenda/projects/kypo-training-agenda/instance-edit/src/services/state/edit/training-instance-edit-concrete.service.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import { TestBed } from '@angular/core/testing';\nimport { Router } from '@angular/router';\nimport { RouterTestingModule } from '@angular/router/testing';\nimport { asyncData } from '@sentinel/common';\nimport { SandboxInstanceApi } from '@muni-kypo-crp/sandbox-api';\nimport { TrainingInstanceApi } from '@muni-kypo-crp/training-api';\nimport { TrainingInstance } from '@muni-kypo-crp/training-model';\nimport { throwError } from 'rxjs';\nimport { TrainingInstanceChangeEvent } from '../../../model/events/training-instance-change-event';\nimport {\n  createContext,\n  createErrorHandlerSpy,\n  createNavigatorSpy,\n  createNotificationSpy,\n  createRouterSpy,\n  createSandboxInstanceApiSpy,\n  createTrainingInstanceApiSpy,\n} from '../../../../../internal/src/testing/testing-commons.spec';\nimport { TrainingErrorHandler } from '../../../../../src/services/training-error.handler.service';\nimport { TrainingNavigator } from '../../../../../src/services/training-navigator.service';\nimport { TrainingNotificationService } from '../../../../../src/services/training-notification.service';\nimport { TrainingAgendaContext } from '../../../../../internal/src/services/context/training-agenda-context.service';\nimport { TrainingInstanceEditConcreteService } from './training-instance-edit-concrete.service';\n\ndescribe('TrainingInstanceEditConcreteService', () => {\n  let errorHandlerSpy: jasmine.SpyObj<TrainingErrorHandler>;\n  let trainingInstanceApiSpy: jasmine.SpyObj<TrainingInstanceApi>;\n  let sandboxInstanceApiSpy: jasmine.SpyObj<SandboxInstanceApi>;\n  let service: TrainingInstanceEditConcreteService;\n  let navigatorSpy: jasmine.SpyObj<TrainingNavigator>;\n  let routerSpy: jasmine.SpyObj<Router>;\n  let notificationSpy: jasmine.SpyObj<TrainingNotificationService>;\n  let context: TrainingAgendaContext;\n\n  beforeEach(() => {\n    errorHandlerSpy = createErrorHandlerSpy();\n    notificationSpy = createNotificationSpy();\n    trainingInstanceApiSpy = createTrainingInstanceApiSpy();\n    sandboxInstanceApiSpy = createSandboxInstanceApiSpy();\n    navigatorSpy = createNavigatorSpy();\n    routerSpy = createRouterSpy();\n    context = createContext();\n\n    TestBed.configureTestingModule({\n      providers: [\n        TrainingInstanceEditConcreteService,\n        { provide: TrainingInstanceApi, useValue: trainingInstanceApiSpy },\n        { provide: SandboxInstanceApi, useValue: sandboxInstanceApiSpy },\n        { provide: Router, useValue: routerSpy },\n        { provide: TrainingErrorHandler, useValue: errorHandlerSpy },\n        { provide: TrainingNotificationService, useValue: notificationSpy },\n        { provide: TrainingNavigator, useValue: navigatorSpy },\n        { provide: TrainingAgendaContext, useValue: context },\n      ],\n      imports: [RouterTestingModule],\n    });\n    service = TestBed.inject(TrainingInstanceEditConcreteService);\n  });\n\n  it('should be created', () => {\n    expect(service).toBeTruthy();\n  });\n\n  it('should set training instance as currently edited', () => {\n    const trainingInstance = createMock();\n    service.set(trainingInstance);\n    service.trainingInstance$.subscribe((ti) => {\n      expect(ti).toEqual(trainingInstance);\n    });\n    service.editMode$.subscribe((isEdit) => {\n      expect(isEdit).toBeTruthy();\n    });\n  });\n\n  it('should create new training instance if set is not called with one', () => {\n    service.set(null);\n    service.trainingInstance$.subscribe((ti) => {\n      expect(ti).toBeTruthy();\n    });\n  });\n\n  it('should save existing training instance', (done) => {\n    trainingInstanceApiSpy.update.and.returnValue(asyncData(''));\n    service.set(createMock());\n    service.change(new TrainingInstanceChangeEvent(createMock(), true));\n    service.save().subscribe(\n      (res) => {\n        expect(trainingInstanceApiSpy.update).toHaveBeenCalledTimes(1);\n        expect(notificationSpy.emit).toHaveBeenCalledTimes(1);\n        expect(notificationSpy.emit).toHaveBeenCalledWith('success', jasmine.anything());\n        expect(res).toEqual(0);\n        done();\n      },\n      () => fail\n    );\n  });\n\n  it('should save new training instance', (done) => {\n    trainingInstanceApiSpy.create.and.returnValue(asyncData(createMock()));\n    routerSpy.navigate.and.returnValue(asyncData(true).toPromise());\n    service.save().subscribe(\n      (res) => {\n        expect(trainingInstanceApiSpy.create).toHaveBeenCalledTimes(1);\n        expect(routerSpy.navigate).toHaveBeenCalledTimes(1);\n        expect(navigatorSpy.toTrainingInstanceOverview).toHaveBeenCalledTimes(1);\n        expect(notificationSpy.emit).toHaveBeenCalledWith('success', jasmine.anything());\n        expect(res).toEqual(true);\n        done();\n      },\n      () => fail\n    );\n  });\n\n  it('should emit error when save existing training instance fails', (done) => {\n    trainingInstanceApiSpy.update.and.returnValue(throwError(null));\n    service.set(createMock());\n    service.save().subscribe(\n      () => fail,\n      (err) => {\n        expect(errorHandlerSpy.emit).toHaveBeenCalledTimes(1);\n        expect(errorHandlerSpy.emit).toHaveBeenCalledWith(err, jasmine.anything());\n        done();\n      }\n    );\n  });\n\n  it('should emit error when save new training instance fails', (done) => {\n    trainingInstanceApiSpy.create.and.returnValue(throwError(null));\n    routerSpy.navigate.and.returnValue(asyncData(true).toPromise());\n    service.save().subscribe(\n      () => fail,\n      (err) => {\n        expect(errorHandlerSpy.emit).toHaveBeenCalledTimes(1);\n        expect(errorHandlerSpy.emit).toHaveBeenCalledWith(err, jasmine.anything());\n        done();\n      }\n    );\n  });\n\n  it('should create training instance and stay on edit page', (done) => {\n    trainingInstanceApiSpy.create.and.returnValue(asyncData(createMock()));\n    routerSpy.navigate.and.returnValue(asyncData(true).toPromise());\n    service.createAndStay().subscribe(\n      () => {\n        expect(trainingInstanceApiSpy.create).toHaveBeenCalledTimes(1);\n        expect(routerSpy.navigate).toHaveBeenCalledTimes(1);\n        expect(navigatorSpy.toTrainingInstanceEdit).toHaveBeenCalledTimes(1);\n        expect(notificationSpy.emit).toHaveBeenCalledWith('success', jasmine.anything());\n        done();\n      },\n      () => fail\n    );\n  });\n\n  it('should emit error when create training instance and stay on edit page fails', (done) => {\n    trainingInstanceApiSpy.create.and.returnValue(throwError(null));\n    routerSpy.navigate.and.returnValue(asyncData(true).toPromise());\n    service.createAndStay().subscribe(\n      () => fail,\n      (err) => {\n        expect(errorHandlerSpy.emit).toHaveBeenCalledTimes(1);\n        expect(errorHandlerSpy.emit).toHaveBeenCalledWith(err, jasmine.anything());\n        done();\n      }\n    );\n  });\n\n  it('should update and save snapshot of edited training instance', () => {\n    service.change(new TrainingInstanceChangeEvent(createMock(), false));\n    service.saveDisabled$.subscribe((idDisabled) => expect(idDisabled).toBeTruthy());\n  });\n\n  function createMock() {\n    const trainingInstance = new TrainingInstance();\n    trainingInstance.id = 0;\n    trainingInstance.startTime = new Date();\n    return trainingInstance;\n  }\n});\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}