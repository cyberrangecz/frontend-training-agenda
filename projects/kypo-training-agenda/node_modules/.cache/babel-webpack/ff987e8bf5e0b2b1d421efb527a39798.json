{"ast":null,"code":"import { async, TestBed } from '@angular/core/testing';\nimport { PaginatedResource, SentinelPagination, RequestedPagination, asyncData } from '@sentinel/common';\nimport { AdaptiveDefinitionApiService } from '@muni-kypo-crp/training-api';\nimport { TrainingDefinitionInfo } from '@muni-kypo-crp/training-model';\nimport { throwError } from 'rxjs';\nimport { skip, take } from 'rxjs/operators';\nimport { createAdaptiveDefinitionApiSpy, createContext, createErrorHandlerSpy } from '../../../../../internal/src/testing/testing-commons.spec';\nimport { TrainingErrorHandler } from '../../../../../src/services/training-error.handler.service';\nimport { TrainingAgendaContext } from '../../../../../internal/src/services/context/training-agenda-context.service';\nimport { AdaptiveDefinitionOrganizerSelectConcreteService } from './adaptive-definition-organizer-select-concrete.service';\ndescribe('TrainingDefinitionOrganizerSelectorService', () => {\n  let errorHandlerSpy;\n  let adApiSpy;\n  let service;\n  let context;\n  beforeEach(async(() => {\n    errorHandlerSpy = createErrorHandlerSpy();\n    adApiSpy = createAdaptiveDefinitionApiSpy();\n    context = createContext();\n    TestBed.configureTestingModule({\n      providers: [AdaptiveDefinitionOrganizerSelectConcreteService, {\n        provide: AdaptiveDefinitionApiService,\n        useValue: adApiSpy\n      }, {\n        provide: TrainingErrorHandler,\n        useValue: errorHandlerSpy\n      }, {\n        provide: TrainingAgendaContext,\n        useValue: context\n      }]\n    });\n    service = TestBed.inject(AdaptiveDefinitionOrganizerSelectConcreteService);\n  }));\n  it('should be created', () => {\n    expect(service).toBeTruthy();\n  });\n  it('should load training definitions from facade (called once)', done => {\n    adApiSpy.getAllForOrganizer.and.returnValue(asyncData(createMock()));\n    const pagination = createPagination();\n    service.getAll(pagination, 'RELEASED').subscribe(() => done(), fail);\n    expect(adApiSpy.getAllForOrganizer).toHaveBeenCalledTimes(1);\n  });\n  it('should call error handler on err', done => {\n    adApiSpy.getAllForOrganizer.and.returnValue(throwError(null));\n    const pagination = createPagination();\n    service.getAll(pagination, 'RELEASED').subscribe(() => fail, () => {\n      expect(errorHandlerSpy.emit).toHaveBeenCalledTimes(1);\n      done();\n    });\n  });\n  it('should emit hasError on err', done => {\n    adApiSpy.getAllForOrganizer.and.returnValue(throwError(null));\n    const pagination = createPagination();\n    service.hasError$.pipe(skip(2)) // we ignore initial value and value emitted before the call is made\n    .subscribe(emitted => {\n      expect(emitted).toBeTruthy();\n      done();\n    }, fail);\n    service.getAll(pagination, 'RELEASED').pipe(take(1)).subscribe(fail, _ => _);\n  });\n  it('should emit next value on get', done => {\n    const mockData = createMock();\n    adApiSpy.getAllForOrganizer.and.returnValue(asyncData(mockData));\n    const pagination = createPagination();\n    service.resource$.pipe(skip(1)).subscribe(emitted => {\n      expect(emitted).toBe(mockData);\n      done();\n    }, fail);\n    service.getAll(pagination, 'RELEASED').pipe(take(1)).subscribe(_ => _, fail);\n  });\n\n  function createPagination() {\n    return new RequestedPagination(1, 5, '', '');\n  }\n\n  function createMock() {\n    const td1 = new TrainingDefinitionInfo();\n    td1.id = 0;\n    const td2 = new TrainingDefinitionInfo();\n    td2.id = 1;\n    return new PaginatedResource([td1, td2], new SentinelPagination(1, 2, 5, 2, 1));\n  }\n});","map":{"version":3,"sources":["/home/dominik/Desktop/Workspace/FRONTEND/kypo-training-agenda/projects/kypo-training-agenda/adaptive-instance-edit/src/services/state/training-definition-selector/training-definition-organizer-selector.service.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import { async, TestBed } from '@angular/core/testing';\nimport { PaginatedResource, SentinelPagination, RequestedPagination, asyncData } from '@sentinel/common';\nimport { AdaptiveDefinitionApiService } from '@muni-kypo-crp/training-api';\nimport { TrainingDefinitionInfo } from '@muni-kypo-crp/training-model';\nimport { throwError } from 'rxjs';\nimport { skip, take } from 'rxjs/operators';\nimport {\n  createAdaptiveDefinitionApiSpy,\n  createContext,\n  createErrorHandlerSpy,\n} from '../../../../../internal/src/testing/testing-commons.spec';\nimport { TrainingErrorHandler } from '../../../../../src/services/training-error.handler.service';\nimport { TrainingAgendaContext } from '../../../../../internal/src/services/context/training-agenda-context.service';\nimport { AdaptiveDefinitionOrganizerSelectConcreteService } from './adaptive-definition-organizer-select-concrete.service';\n\ndescribe('TrainingDefinitionOrganizerSelectorService', () => {\n  let errorHandlerSpy: jasmine.SpyObj<TrainingErrorHandler>;\n  let adApiSpy: jasmine.SpyObj<AdaptiveDefinitionApiService>;\n  let service: AdaptiveDefinitionOrganizerSelectConcreteService;\n  let context: TrainingAgendaContext;\n\n  beforeEach(async(() => {\n    errorHandlerSpy = createErrorHandlerSpy();\n    adApiSpy = createAdaptiveDefinitionApiSpy();\n    context = createContext();\n\n    TestBed.configureTestingModule({\n      providers: [\n        AdaptiveDefinitionOrganizerSelectConcreteService,\n        { provide: AdaptiveDefinitionApiService, useValue: adApiSpy },\n        { provide: TrainingErrorHandler, useValue: errorHandlerSpy },\n        { provide: TrainingAgendaContext, useValue: context },\n      ],\n    });\n    service = TestBed.inject(AdaptiveDefinitionOrganizerSelectConcreteService);\n  }));\n\n  it('should be created', () => {\n    expect(service).toBeTruthy();\n  });\n\n  it('should load training definitions from facade (called once)', (done) => {\n    adApiSpy.getAllForOrganizer.and.returnValue(asyncData(createMock()));\n    const pagination = createPagination();\n    service.getAll(pagination, 'RELEASED').subscribe(() => done(), fail);\n    expect(adApiSpy.getAllForOrganizer).toHaveBeenCalledTimes(1);\n  });\n\n  it('should call error handler on err', (done) => {\n    adApiSpy.getAllForOrganizer.and.returnValue(throwError(null));\n    const pagination = createPagination();\n    service.getAll(pagination, 'RELEASED').subscribe(\n      () => fail,\n      () => {\n        expect(errorHandlerSpy.emit).toHaveBeenCalledTimes(1);\n        done();\n      }\n    );\n  });\n\n  it('should emit hasError on err', (done) => {\n    adApiSpy.getAllForOrganizer.and.returnValue(throwError(null));\n    const pagination = createPagination();\n    service.hasError$\n      .pipe(skip(2)) // we ignore initial value and value emitted before the call is made\n      .subscribe((emitted) => {\n        expect(emitted).toBeTruthy();\n        done();\n      }, fail);\n    service\n      .getAll(pagination, 'RELEASED')\n      .pipe(take(1))\n      .subscribe(fail, (_) => _);\n  });\n\n  it('should emit next value on get', (done) => {\n    const mockData = createMock();\n    adApiSpy.getAllForOrganizer.and.returnValue(asyncData(mockData));\n    const pagination = createPagination();\n    service.resource$.pipe(skip(1)).subscribe((emitted) => {\n      expect(emitted).toBe(mockData);\n      done();\n    }, fail);\n\n    service\n      .getAll(pagination, 'RELEASED')\n      .pipe(take(1))\n      .subscribe((_) => _, fail);\n  });\n\n  function createPagination() {\n    return new RequestedPagination(1, 5, '', '');\n  }\n\n  function createMock() {\n    const td1 = new TrainingDefinitionInfo();\n    td1.id = 0;\n    const td2 = new TrainingDefinitionInfo();\n    td2.id = 1;\n    return new PaginatedResource([td1, td2], new SentinelPagination(1, 2, 5, 2, 1));\n  }\n});\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}