{"ast":null,"code":"import { TestBed } from '@angular/core/testing';\nimport { asyncData } from '@sentinel/common';\nimport { Question } from '@muni-kypo-crp/training-model';\nimport { TrainingAgendaConfig } from '../../../src/model/training-agenda-config';\nimport { createRunningTrainingRunServiceSpy } from '../../../internal/src/testing/testing-commons.spec';\nimport { TrainingAgendaContext } from '../../../internal/src/services/context/training-agenda-context.service';\nimport { RunningTrainingRunService } from '../../../internal/src/services/training-run/running/running-training-run.service';\nimport { PreviewAssessmentLevelService } from './preview-assessment-level.service';\ndescribe('PreviewAssessmentLevelService', () => {\n  let service;\n  let context;\n  let runningTrainingRunSpy;\n  beforeEach(() => {\n    const config = new TrainingAgendaConfig();\n    config.pollingPeriod = 5000;\n    config.defaultPaginationSize = 10;\n    context = new TrainingAgendaContext(config);\n    runningTrainingRunSpy = createRunningTrainingRunServiceSpy();\n    TestBed.configureTestingModule({\n      providers: [PreviewAssessmentLevelService, {\n        provide: RunningTrainingRunService,\n        useValue: runningTrainingRunSpy\n      }, {\n        provide: TrainingAgendaContext,\n        useValue: context\n      }]\n    });\n    service = TestBed.inject(PreviewAssessmentLevelService);\n  });\n  it('should be created', () => {\n    expect(service).toBeTruthy();\n  });\n  it('should submit answers', done => {\n    runningTrainingRunSpy.next.and.returnValue(asyncData(createMock()));\n    service.submit().subscribe(res => {\n      expect(res).toBeTruthy();\n      expect(res).toEqual(createMock());\n      expect(runningTrainingRunSpy.next).toHaveBeenCalledTimes(1);\n      done();\n    });\n  });\n\n  function createMock() {\n    const quest1 = new DummyQuestion('Question 1');\n    const quest2 = new DummyQuestion('Question 2');\n    return [quest1, quest2];\n  }\n\n  class DummyQuestion extends Question {\n    constructor(title) {\n      super(title);\n    }\n\n  }\n});","map":{"version":3,"sources":["/home/dominik/Desktop/Workspace/FRONTEND/kypo-training-agenda/projects/kypo-training-agenda/definition-preview/src/services/preview-assessment-level.service.spec.ts"],"names":[],"mappings":"AAAA,SAAS,OAAT,QAAwB,uBAAxB;AACA,SAAS,SAAT,QAA0B,kBAA1B;AACA,SAAS,QAAT,QAAyB,+BAAzB;AACA,SAAS,oBAAT,QAAqC,2CAArC;AACA,SAAS,kCAAT,QAAmD,oDAAnD;AACA,SAAS,qBAAT,QAAsC,wEAAtC;AACA,SAAS,yBAAT,QAA0C,kFAA1C;AACA,SAAS,6BAAT,QAA8C,oCAA9C;AAEA,QAAQ,CAAC,+BAAD,EAAkC,MAAK;AAC7C,MAAI,OAAJ;AACA,MAAI,OAAJ;AACA,MAAI,qBAAJ;AAEA,EAAA,UAAU,CAAC,MAAK;AACd,UAAM,MAAM,GAAG,IAAI,oBAAJ,EAAf;AACA,IAAA,MAAM,CAAC,aAAP,GAAuB,IAAvB;AACA,IAAA,MAAM,CAAC,qBAAP,GAA+B,EAA/B;AACA,IAAA,OAAO,GAAG,IAAI,qBAAJ,CAA0B,MAA1B,CAAV;AACA,IAAA,qBAAqB,GAAG,kCAAkC,EAA1D;AAEA,IAAA,OAAO,CAAC,sBAAR,CAA+B;AAC7B,MAAA,SAAS,EAAE,CACT,6BADS,EAET;AAAE,QAAA,OAAO,EAAE,yBAAX;AAAsC,QAAA,QAAQ,EAAE;AAAhD,OAFS,EAGT;AAAE,QAAA,OAAO,EAAE,qBAAX;AAAkC,QAAA,QAAQ,EAAE;AAA5C,OAHS;AADkB,KAA/B;AAOA,IAAA,OAAO,GAAG,OAAO,CAAC,MAAR,CAAe,6BAAf,CAAV;AACD,GAfS,CAAV;AAiBA,EAAA,EAAE,CAAC,mBAAD,EAAsB,MAAK;AAC3B,IAAA,MAAM,CAAC,OAAD,CAAN,CAAgB,UAAhB;AACD,GAFC,CAAF;AAIA,EAAA,EAAE,CAAC,uBAAD,EAA2B,IAAD,IAAS;AACnC,IAAA,qBAAqB,CAAC,IAAtB,CAA2B,GAA3B,CAA+B,WAA/B,CAA2C,SAAS,CAAC,UAAU,EAAX,CAApD;AACA,IAAA,OAAO,CAAC,MAAR,GAAiB,SAAjB,CAA4B,GAAD,IAAQ;AACjC,MAAA,MAAM,CAAC,GAAD,CAAN,CAAY,UAAZ;AACA,MAAA,MAAM,CAAC,GAAD,CAAN,CAAY,OAAZ,CAAoB,UAAU,EAA9B;AACA,MAAA,MAAM,CAAC,qBAAqB,CAAC,IAAvB,CAAN,CAAmC,qBAAnC,CAAyD,CAAzD;AACA,MAAA,IAAI;AACL,KALD;AAMD,GARC,CAAF;;AAUA,WAAS,UAAT,GAAmB;AACjB,UAAM,MAAM,GAAG,IAAI,aAAJ,CAAkB,YAAlB,CAAf;AACA,UAAM,MAAM,GAAG,IAAI,aAAJ,CAAkB,YAAlB,CAAf;AACA,WAAO,CAAC,MAAD,EAAS,MAAT,CAAP;AACD;;AAED,QAAM,aAAN,SAA4B,QAA5B,CAAoC;AAClC,IAAA,WAAA,CAAY,KAAZ,EAAyB;AACvB,YAAM,KAAN;AACD;;AAHiC;AAKrC,CA/CO,CAAR","sourcesContent":["import { TestBed } from '@angular/core/testing';\nimport { asyncData } from '@sentinel/common';\nimport { Question } from '@muni-kypo-crp/training-model';\nimport { TrainingAgendaConfig } from '../../../src/model/training-agenda-config';\nimport { createRunningTrainingRunServiceSpy } from '../../../internal/src/testing/testing-commons.spec';\nimport { TrainingAgendaContext } from '../../../internal/src/services/context/training-agenda-context.service';\nimport { RunningTrainingRunService } from '../../../internal/src/services/training-run/running/running-training-run.service';\nimport { PreviewAssessmentLevelService } from './preview-assessment-level.service';\n\ndescribe('PreviewAssessmentLevelService', () => {\n  let service: PreviewAssessmentLevelService;\n  let context: TrainingAgendaContext;\n  let runningTrainingRunSpy: jasmine.SpyObj<RunningTrainingRunService>;\n\n  beforeEach(() => {\n    const config = new TrainingAgendaConfig();\n    config.pollingPeriod = 5000;\n    config.defaultPaginationSize = 10;\n    context = new TrainingAgendaContext(config);\n    runningTrainingRunSpy = createRunningTrainingRunServiceSpy();\n\n    TestBed.configureTestingModule({\n      providers: [\n        PreviewAssessmentLevelService,\n        { provide: RunningTrainingRunService, useValue: runningTrainingRunSpy },\n        { provide: TrainingAgendaContext, useValue: context },\n      ],\n    });\n    service = TestBed.inject(PreviewAssessmentLevelService);\n  });\n\n  it('should be created', () => {\n    expect(service).toBeTruthy();\n  });\n\n  it('should submit answers', (done) => {\n    runningTrainingRunSpy.next.and.returnValue(asyncData(createMock()));\n    service.submit().subscribe((res) => {\n      expect(res).toBeTruthy();\n      expect(res).toEqual(createMock());\n      expect(runningTrainingRunSpy.next).toHaveBeenCalledTimes(1);\n      done();\n    });\n  });\n\n  function createMock(): Question[] {\n    const quest1 = new DummyQuestion('Question 1');\n    const quest2 = new DummyQuestion('Question 2');\n    return [quest1, quest2];\n  }\n\n  class DummyQuestion extends Question {\n    constructor(title: string) {\n      super(title);\n    }\n  }\n});\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}