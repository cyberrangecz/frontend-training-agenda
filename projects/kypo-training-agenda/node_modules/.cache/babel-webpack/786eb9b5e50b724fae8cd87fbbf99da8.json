{"ast":null,"code":"import { async, TestBed } from '@angular/core/testing';\nimport { asyncData, RequestedPagination, PaginatedResource, SentinelPagination } from '@sentinel/common';\nimport { PoolApi } from '@muni-kypo-crp/sandbox-api';\nimport { Pool } from '@muni-kypo-crp/sandbox-model';\nimport { TrainingInstanceApi } from '@muni-kypo-crp/training-api';\nimport { TrainingInstance } from '@muni-kypo-crp/training-model';\nimport { throwError } from 'rxjs';\nimport { createContext, createErrorHandlerSpy, createNotificationSpy, createPoolApiSpy, createTrainingInstanceApiSpy } from '../../../../../internal/src/testing/testing-commons.spec';\nimport { TrainingErrorHandler } from '../../../../../src/services/training-error.handler.service';\nimport { TrainingNotificationService } from '../../../../../src/services/training-notification.service';\nimport { TrainingAgendaContext } from '../../../../../internal/src/services/context/training-agenda-context.service';\nimport { PoolAssignConcreteService } from './pool-assign-concrete.service';\ndescribe('PoolAssignConcreteService', () => {\n  let errorHandlerSpy;\n  let trainingInstanceApiSpy;\n  let poolApiSpy;\n  let notificationSpy;\n  let service;\n  let context;\n  beforeEach(async(() => {\n    errorHandlerSpy = createErrorHandlerSpy();\n    trainingInstanceApiSpy = createTrainingInstanceApiSpy();\n    poolApiSpy = createPoolApiSpy();\n    notificationSpy = createNotificationSpy();\n    context = createContext();\n    TestBed.configureTestingModule({\n      providers: [PoolAssignConcreteService, {\n        provide: TrainingInstanceApi,\n        useValue: trainingInstanceApiSpy\n      }, {\n        provide: PoolApi,\n        useValue: poolApiSpy\n      }, {\n        provide: TrainingNotificationService,\n        useValue: notificationSpy\n      }, {\n        provide: TrainingErrorHandler,\n        useValue: errorHandlerSpy\n      }, {\n        provide: TrainingAgendaContext,\n        useValue: context\n      }]\n    });\n    service = TestBed.inject(PoolAssignConcreteService);\n  }));\n  it('should be created', () => {\n    expect(service).toBeTruthy();\n  });\n  it('should init service', () => {\n    const trainingInstance = createInstanceMock();\n    service.init(trainingInstance);\n    service.assignedPool$.subscribe(res => expect(res).toEqual(trainingInstance.poolId));\n  });\n  it('should get all pools', done => {\n    poolApiSpy.getPools.and.returnValue(asyncData(createPoolsPaginatedMock()));\n    service.getAll(createPagination()).subscribe(() => done(), () => fail);\n    expect(poolApiSpy.getPools).toHaveBeenCalledTimes(1);\n  });\n  it('should emit error when get all pools fails', done => {\n    poolApiSpy.getPools.and.returnValue(throwError(null));\n    service.getAll(createPagination()).subscribe(() => fail, () => done());\n    expect(poolApiSpy.getPools).toHaveBeenCalledTimes(1);\n  });\n  it('should assign pools', done => {\n    trainingInstanceApiSpy.assignPool.and.returnValue(asyncData(0));\n    const trainingInstance = createInstanceMock();\n    const pool = createPoolMock();\n    service.init(trainingInstance);\n    service.select(pool);\n    service.assign(trainingInstance).subscribe(res => {\n      expect(trainingInstanceApiSpy.assignPool).toHaveBeenCalledTimes(1);\n      expect(notificationSpy.emit).toHaveBeenCalledTimes(1);\n      expect(notificationSpy.emit).toHaveBeenCalledWith('success', jasmine.anything());\n      expect(res).toEqual(0);\n      service.assignedPool$.subscribe(val => expect(val).toEqual(pool.id));\n      done();\n    }, () => fail);\n  });\n  it('should throw error when assign pools fails', done => {\n    trainingInstanceApiSpy.assignPool.and.returnValue(throwError(null));\n    const trainingInstance = createInstanceMock();\n    const pool = createPoolMock();\n    service.init(trainingInstance);\n    service.select(pool);\n    service.assign(trainingInstance).subscribe(() => fail, err => {\n      expect(errorHandlerSpy.emit).toHaveBeenCalledTimes(1);\n      expect(errorHandlerSpy.emit).toHaveBeenCalledWith(err, jasmine.anything());\n      done();\n    });\n  });\n  it('should unassign pools', done => {\n    trainingInstanceApiSpy.unassignPool.and.returnValue(asyncData(0));\n    poolApiSpy.getPools.and.returnValue(asyncData(createPoolsPaginatedMock()));\n    const trainingInstance = createInstanceMock();\n    const pool = createPoolMock();\n    service.init(trainingInstance);\n    service.select(pool);\n    service.unassign(trainingInstance).subscribe(res => {\n      expect(trainingInstanceApiSpy.unassignPool).toHaveBeenCalledTimes(1);\n      expect(notificationSpy.emit).toHaveBeenCalledTimes(1);\n      expect(notificationSpy.emit).toHaveBeenCalledWith('success', jasmine.anything());\n      expect(res).toEqual(createPoolsPaginatedMock());\n      service.assignedPool$.subscribe(val => expect(val).toEqual(undefined));\n      done();\n    }, () => fail);\n  });\n  it('should throw error when unassign pools fails', done => {\n    trainingInstanceApiSpy.unassignPool.and.returnValue(throwError(null));\n    const trainingInstance = createInstanceMock();\n    const pool = createPoolMock();\n    service.init(trainingInstance);\n    service.select(pool);\n    service.unassign(trainingInstance).subscribe(() => fail, err => {\n      expect(errorHandlerSpy.emit).toHaveBeenCalledTimes(1);\n      expect(errorHandlerSpy.emit).toHaveBeenCalledWith(err, jasmine.anything());\n      done();\n    });\n  });\n\n  function createPagination() {\n    return new RequestedPagination(1, 5, '', '');\n  }\n\n  function createInstanceMock() {\n    const trainingInstance = new TrainingInstance();\n    trainingInstance.id = 2;\n    trainingInstance.poolId = 4;\n    return trainingInstance;\n  }\n\n  function createPoolsPaginatedMock() {\n    const pool1 = new Pool();\n    pool1.id = 0;\n    const pool2 = new Pool();\n    pool2.id = 1;\n    return new PaginatedResource([pool1, pool2], new SentinelPagination(1, 2, 2, 2, 1));\n  }\n\n  function createPoolMock() {\n    const pool = new Pool();\n    pool.id = 2;\n    return pool;\n  }\n});","map":{"version":3,"sources":["/home/dominik/Desktop/Workspace/FRONTEND/kypo-training-agenda/projects/kypo-training-agenda/instance-edit/src/services/state/pool-assign/pool-assign-concrete.service.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import { async, TestBed } from '@angular/core/testing';\nimport { asyncData, RequestedPagination, PaginatedResource, SentinelPagination } from '@sentinel/common';\nimport { PoolApi } from '@muni-kypo-crp/sandbox-api';\nimport { Pool } from '@muni-kypo-crp/sandbox-model';\nimport { TrainingInstanceApi } from '@muni-kypo-crp/training-api';\nimport { TrainingInstance } from '@muni-kypo-crp/training-model';\nimport { throwError } from 'rxjs';\nimport {\n  createContext,\n  createErrorHandlerSpy,\n  createNotificationSpy,\n  createPoolApiSpy,\n  createTrainingInstanceApiSpy,\n} from '../../../../../internal/src/testing/testing-commons.spec';\nimport { TrainingErrorHandler } from '../../../../../src/services/training-error.handler.service';\nimport { TrainingNotificationService } from '../../../../../src/services/training-notification.service';\nimport { TrainingAgendaContext } from '../../../../../internal/src/services/context/training-agenda-context.service';\nimport { PoolAssignConcreteService } from './pool-assign-concrete.service';\n\ndescribe('PoolAssignConcreteService', () => {\n  let errorHandlerSpy: jasmine.SpyObj<TrainingErrorHandler>;\n  let trainingInstanceApiSpy: jasmine.SpyObj<TrainingInstanceApi>;\n  let poolApiSpy: jasmine.SpyObj<PoolApi>;\n  let notificationSpy: jasmine.SpyObj<TrainingNotificationService>;\n  let service: PoolAssignConcreteService;\n  let context: TrainingAgendaContext;\n\n  beforeEach(async(() => {\n    errorHandlerSpy = createErrorHandlerSpy();\n    trainingInstanceApiSpy = createTrainingInstanceApiSpy();\n    poolApiSpy = createPoolApiSpy();\n    notificationSpy = createNotificationSpy();\n    context = createContext();\n\n    TestBed.configureTestingModule({\n      providers: [\n        PoolAssignConcreteService,\n        { provide: TrainingInstanceApi, useValue: trainingInstanceApiSpy },\n        { provide: PoolApi, useValue: poolApiSpy },\n        { provide: TrainingNotificationService, useValue: notificationSpy },\n        { provide: TrainingErrorHandler, useValue: errorHandlerSpy },\n        { provide: TrainingAgendaContext, useValue: context },\n      ],\n    });\n    service = TestBed.inject(PoolAssignConcreteService);\n  }));\n\n  it('should be created', () => {\n    expect(service).toBeTruthy();\n  });\n\n  it('should init service', () => {\n    const trainingInstance = createInstanceMock();\n    service.init(trainingInstance);\n    service.assignedPool$.subscribe((res) => expect(res).toEqual(trainingInstance.poolId));\n  });\n\n  it('should get all pools', (done) => {\n    poolApiSpy.getPools.and.returnValue(asyncData(createPoolsPaginatedMock()));\n    service.getAll(createPagination()).subscribe(\n      () => done(),\n      () => fail\n    );\n    expect(poolApiSpy.getPools).toHaveBeenCalledTimes(1);\n  });\n\n  it('should emit error when get all pools fails', (done) => {\n    poolApiSpy.getPools.and.returnValue(throwError(null));\n    service.getAll(createPagination()).subscribe(\n      () => fail,\n      () => done()\n    );\n    expect(poolApiSpy.getPools).toHaveBeenCalledTimes(1);\n  });\n\n  it('should assign pools', (done) => {\n    trainingInstanceApiSpy.assignPool.and.returnValue(asyncData(0));\n    const trainingInstance = createInstanceMock();\n    const pool = createPoolMock();\n    service.init(trainingInstance);\n    service.select(pool);\n    service.assign(trainingInstance).subscribe(\n      (res) => {\n        expect(trainingInstanceApiSpy.assignPool).toHaveBeenCalledTimes(1);\n        expect(notificationSpy.emit).toHaveBeenCalledTimes(1);\n        expect(notificationSpy.emit).toHaveBeenCalledWith('success', jasmine.anything());\n        expect(res).toEqual(0);\n        service.assignedPool$.subscribe((val) => expect(val).toEqual(pool.id));\n        done();\n      },\n      () => fail\n    );\n  });\n\n  it('should throw error when assign pools fails', (done) => {\n    trainingInstanceApiSpy.assignPool.and.returnValue(throwError(null));\n    const trainingInstance = createInstanceMock();\n    const pool = createPoolMock();\n    service.init(trainingInstance);\n    service.select(pool);\n    service.assign(trainingInstance).subscribe(\n      () => fail,\n      (err) => {\n        expect(errorHandlerSpy.emit).toHaveBeenCalledTimes(1);\n        expect(errorHandlerSpy.emit).toHaveBeenCalledWith(err, jasmine.anything());\n        done();\n      }\n    );\n  });\n\n  it('should unassign pools', (done) => {\n    trainingInstanceApiSpy.unassignPool.and.returnValue(asyncData(0));\n    poolApiSpy.getPools.and.returnValue(asyncData(createPoolsPaginatedMock()));\n    const trainingInstance = createInstanceMock();\n    const pool = createPoolMock();\n    service.init(trainingInstance);\n    service.select(pool);\n    service.unassign(trainingInstance).subscribe(\n      (res) => {\n        expect(trainingInstanceApiSpy.unassignPool).toHaveBeenCalledTimes(1);\n        expect(notificationSpy.emit).toHaveBeenCalledTimes(1);\n        expect(notificationSpy.emit).toHaveBeenCalledWith('success', jasmine.anything());\n        expect(res).toEqual(createPoolsPaginatedMock());\n        service.assignedPool$.subscribe((val) => expect(val).toEqual(undefined));\n        done();\n      },\n      () => fail\n    );\n  });\n\n  it('should throw error when unassign pools fails', (done) => {\n    trainingInstanceApiSpy.unassignPool.and.returnValue(throwError(null));\n    const trainingInstance = createInstanceMock();\n    const pool = createPoolMock();\n    service.init(trainingInstance);\n    service.select(pool);\n    service.unassign(trainingInstance).subscribe(\n      () => fail,\n      (err) => {\n        expect(errorHandlerSpy.emit).toHaveBeenCalledTimes(1);\n        expect(errorHandlerSpy.emit).toHaveBeenCalledWith(err, jasmine.anything());\n        done();\n      }\n    );\n  });\n\n  function createPagination() {\n    return new RequestedPagination(1, 5, '', '');\n  }\n\n  function createInstanceMock(): TrainingInstance {\n    const trainingInstance = new TrainingInstance();\n    trainingInstance.id = 2;\n    trainingInstance.poolId = 4;\n    return trainingInstance;\n  }\n\n  function createPoolsPaginatedMock(): PaginatedResource<Pool> {\n    const pool1 = new Pool();\n    pool1.id = 0;\n    const pool2 = new Pool();\n    pool2.id = 1;\n    return new PaginatedResource([pool1, pool2], new SentinelPagination(1, 2, 2, 2, 1));\n  }\n\n  function createPoolMock(): Pool {\n    const pool = new Pool();\n    pool.id = 2;\n    return pool;\n  }\n});\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}