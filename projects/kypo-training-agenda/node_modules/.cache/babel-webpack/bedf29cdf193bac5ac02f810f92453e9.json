{"ast":null,"code":"import { TestBed } from '@angular/core/testing';\nimport { asyncData } from '@sentinel/common';\nimport { TrainingRunApi } from '@muni-kypo-crp/training-api';\nimport { Question } from '@muni-kypo-crp/training-model';\nimport { throwError } from 'rxjs';\nimport { createContext, createErrorHandlerSpy, createRunningTrainingRunServiceSpy, createTrainingRunApiSpy } from '../../../../testing/testing-commons.spec';\nimport { TrainingErrorHandler } from '../../../../../../src/services/training-error.handler.service';\nimport { TrainingAgendaContext } from '../../../context/training-agenda-context.service';\nimport { RunningTrainingRunService } from '../../running/running-training-run.service';\nimport { TrainingRunAssessmentLevelConcreteService } from './training-run-assessment-level-concrete.service';\ndescribe('TrainingRunAssessmentLevelConcreteService', () => {\n  let errorHandlerSpy;\n  let apiSpy;\n  let service;\n  let runningTrainingRunServiceSpy;\n  let context;\n  beforeEach(() => {\n    errorHandlerSpy = createErrorHandlerSpy();\n    apiSpy = createTrainingRunApiSpy();\n    runningTrainingRunServiceSpy = createRunningTrainingRunServiceSpy();\n    context = createContext();\n    TestBed.configureTestingModule({\n      providers: [TrainingRunAssessmentLevelConcreteService, {\n        provide: TrainingRunApi,\n        useValue: apiSpy\n      }, {\n        provide: TrainingErrorHandler,\n        useValue: errorHandlerSpy\n      }, {\n        provide: RunningTrainingRunService,\n        useValue: runningTrainingRunServiceSpy\n      }, {\n        provide: TrainingAgendaContext,\n        useValue: context\n      }]\n    });\n    service = TestBed.inject(TrainingRunAssessmentLevelConcreteService);\n  });\n  it('should be created', () => {\n    expect(service).toBeTruthy();\n  });\n  it('should submit answers', done => {\n    const questions = createMock();\n    runningTrainingRunServiceSpy.next.and.returnValue(asyncData(questions));\n    apiSpy.submitAnswers.and.returnValue(asyncData(questions));\n    service.submit(questions).subscribe(() => {\n      expect(apiSpy.submitAnswers).toHaveBeenCalledTimes(1);\n      expect(runningTrainingRunServiceSpy.next).toHaveBeenCalledTimes(1);\n      done();\n    }, () => fail);\n  });\n  it('should throw error when submit answers fails', done => {\n    const questions = createMock();\n    apiSpy.submitAnswers.and.returnValue(throwError(null));\n    service.submit(questions).subscribe(() => fail, err => {\n      expect(errorHandlerSpy.emit).toHaveBeenCalledTimes(1);\n      expect(errorHandlerSpy.emit).toHaveBeenCalledWith(err, jasmine.anything());\n      done();\n    });\n  });\n\n  function createMock() {\n    const question1 = new DummyQuestion('Question 1');\n    const question2 = new DummyQuestion('Question 2');\n    const question3 = new DummyQuestion('Question 3');\n    return [question1, question2, question3];\n  }\n\n  class DummyQuestion extends Question {\n    constructor(title) {\n      super(title);\n    }\n\n  }\n});","map":{"version":3,"sources":["/home/dominik/Desktop/Workspace/FRONTEND/kypo-training-agenda/projects/kypo-training-agenda/internal/src/services/training-run/level/assessment/training-run-assessment-level-concrete.service.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import { TestBed } from '@angular/core/testing';\nimport { asyncData } from '@sentinel/common';\nimport { TrainingRunApi } from '@muni-kypo-crp/training-api';\nimport { Question } from '@muni-kypo-crp/training-model';\nimport { throwError } from 'rxjs';\nimport {\n  createContext,\n  createErrorHandlerSpy,\n  createRunningTrainingRunServiceSpy,\n  createTrainingRunApiSpy,\n} from '../../../../testing/testing-commons.spec';\nimport { TrainingErrorHandler } from '../../../../../../src/services/training-error.handler.service';\nimport { TrainingAgendaContext } from '../../../context/training-agenda-context.service';\nimport { RunningTrainingRunService } from '../../running/running-training-run.service';\nimport { TrainingRunAssessmentLevelConcreteService } from './training-run-assessment-level-concrete.service';\n\ndescribe('TrainingRunAssessmentLevelConcreteService', () => {\n  let errorHandlerSpy: jasmine.SpyObj<TrainingErrorHandler>;\n  let apiSpy: jasmine.SpyObj<TrainingRunApi>;\n  let service: TrainingRunAssessmentLevelConcreteService;\n  let runningTrainingRunServiceSpy: jasmine.SpyObj<RunningTrainingRunService>;\n  let context: TrainingAgendaContext;\n\n  beforeEach(() => {\n    errorHandlerSpy = createErrorHandlerSpy();\n    apiSpy = createTrainingRunApiSpy();\n    runningTrainingRunServiceSpy = createRunningTrainingRunServiceSpy();\n    context = createContext();\n\n    TestBed.configureTestingModule({\n      providers: [\n        TrainingRunAssessmentLevelConcreteService,\n        { provide: TrainingRunApi, useValue: apiSpy },\n\n        { provide: TrainingErrorHandler, useValue: errorHandlerSpy },\n        { provide: RunningTrainingRunService, useValue: runningTrainingRunServiceSpy },\n        { provide: TrainingAgendaContext, useValue: context },\n      ],\n    });\n    service = TestBed.inject(TrainingRunAssessmentLevelConcreteService);\n  });\n\n  it('should be created', () => {\n    expect(service).toBeTruthy();\n  });\n\n  it('should submit answers', (done) => {\n    const questions = createMock();\n    runningTrainingRunServiceSpy.next.and.returnValue(asyncData(questions));\n    apiSpy.submitAnswers.and.returnValue(asyncData(questions));\n    service.submit(questions).subscribe(\n      () => {\n        expect(apiSpy.submitAnswers).toHaveBeenCalledTimes(1);\n        expect(runningTrainingRunServiceSpy.next).toHaveBeenCalledTimes(1);\n        done();\n      },\n      () => fail\n    );\n  });\n\n  it('should throw error when submit answers fails', (done) => {\n    const questions = createMock();\n    apiSpy.submitAnswers.and.returnValue(throwError(null));\n    service.submit(questions).subscribe(\n      () => fail,\n      (err) => {\n        expect(errorHandlerSpy.emit).toHaveBeenCalledTimes(1);\n        expect(errorHandlerSpy.emit).toHaveBeenCalledWith(err, jasmine.anything());\n        done();\n      }\n    );\n  });\n\n  function createMock() {\n    const question1 = new DummyQuestion('Question 1');\n    const question2 = new DummyQuestion('Question 2');\n    const question3 = new DummyQuestion('Question 3');\n    return [question1, question2, question3];\n  }\n\n  class DummyQuestion extends Question {\n    constructor(title: string) {\n      super(title);\n    }\n  }\n});\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}