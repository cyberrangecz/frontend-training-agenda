{"ast":null,"code":"import { async, fakeAsync, TestBed, tick } from '@angular/core/testing';\nimport { MatDialog } from '@angular/material/dialog';\nimport { SentinelPagination, PaginatedResource, RequestedPagination, asyncData } from '@sentinel/common';\nimport { AdaptiveInstanceApi, AdaptiveRunApi } from '@muni-kypo-crp/training-api';\nimport { throwError } from 'rxjs';\nimport { skip, take } from 'rxjs/operators';\nimport { createAdaptiveInstanceApiSpy, createAdaptiveRunApiSpy, createContext, createDialogSpy, createErrorHandlerSpy, createNotificationSpy } from '../../../../../internal/src/testing/testing-commons.spec';\nimport { TrainingErrorHandler } from '../../../../../src/services/training-error.handler.service';\nimport { TrainingNotificationService } from '../../../../../src/services/training-notification.service';\nimport { TrainingAgendaContext } from '../../../../../internal/src/services/context/training-agenda-context.service';\nimport { ArchivedAdaptiveRunConcreteService } from './archived-adaptive-run-concrete.service';\ndescribe('ArchivedTrainingRunConcreteService', () => {\n  let errorHandlerSpy;\n  let adaptiveInstanceApiSpy;\n  let adaptiveRunFacadeSpy;\n  let dialogSpy;\n  let notificationSpy;\n  let service;\n  let context;\n  beforeEach(async(() => {\n    errorHandlerSpy = createErrorHandlerSpy();\n    adaptiveInstanceApiSpy = createAdaptiveInstanceApiSpy();\n    notificationSpy = createNotificationSpy();\n    adaptiveRunFacadeSpy = createAdaptiveRunApiSpy();\n    dialogSpy = createDialogSpy();\n    context = createContext();\n    TestBed.configureTestingModule({\n      providers: [ArchivedAdaptiveRunConcreteService, {\n        provide: MatDialog,\n        useValue: dialogSpy\n      }, {\n        provide: AdaptiveInstanceApi,\n        useValue: adaptiveInstanceApiSpy\n      }, {\n        provide: TrainingErrorHandler,\n        useValue: errorHandlerSpy\n      }, {\n        provide: TrainingNotificationService,\n        useValue: notificationSpy\n      }, {\n        provide: TrainingAgendaContext,\n        useValue: context\n      }, {\n        provide: AdaptiveRunApi,\n        useValue: adaptiveRunFacadeSpy\n      }]\n    });\n    service = TestBed.inject(ArchivedAdaptiveRunConcreteService);\n  }));\n  it('should be created', () => {\n    expect(service).toBeTruthy();\n  });\n  it('should emit hasError observable on err', done => {\n    adaptiveInstanceApiSpy.getAssociatedTrainingRuns.and.returnValue(throwError(null));\n    service.hasError$.pipe(skip(2) // we ignore initial value and value emitted before the call is made\n    ).subscribe(hasError => {\n      expect(hasError).toBeTruthy();\n      done();\n    }, () => fail);\n    service.getAll(1, createPagination()).subscribe(() => fail, () => done());\n  });\n  it('should start polling', fakeAsync(() => {\n    const mockData = createMock();\n    adaptiveInstanceApiSpy.getAssociatedTrainingRuns.and.returnValue(asyncData(mockData));\n    service.getAll(1, createPagination()).pipe(take(1)).subscribe();\n    const subscription = service.resource$.subscribe();\n    assertPoll(1);\n    subscription.unsubscribe();\n  }));\n  it('should stop polling on error', fakeAsync(() => {\n    const mockData = createMock();\n    adaptiveInstanceApiSpy.getAssociatedTrainingRuns.and.returnValues(asyncData(mockData), asyncData(mockData), asyncData(mockData), throwError(null));\n    service.getAll(1, createPagination()).pipe(take(1)).subscribe();\n    const subscription = service.resource$.subscribe();\n    assertPoll(3);\n    tick(5 * context.config.pollingPeriod);\n    expect(adaptiveInstanceApiSpy.getAssociatedTrainingRuns).toHaveBeenCalledTimes(4);\n    subscription.unsubscribe();\n  }));\n  it('should start polling again after request is successful', fakeAsync(() => {\n    const pagination = createPagination();\n    const mockData = createMock();\n    adaptiveInstanceApiSpy.getAssociatedTrainingRuns.and.returnValues(asyncData(mockData), asyncData(mockData), asyncData(mockData), throwError(null), asyncData(mockData), asyncData(mockData), asyncData(mockData), asyncData(mockData));\n    service.getAll(1, pagination).pipe(take(1)).subscribe();\n    const subscription = service.resource$.subscribe();\n    assertPoll(3);\n    tick(context.config.pollingPeriod);\n    expect(adaptiveInstanceApiSpy.getAssociatedTrainingRuns).toHaveBeenCalledTimes(4);\n    tick(5 * context.config.pollingPeriod);\n    expect(adaptiveInstanceApiSpy.getAssociatedTrainingRuns).toHaveBeenCalledTimes(4);\n    service.getAll(0, pagination).pipe(take(1)).subscribe();\n    expect(adaptiveInstanceApiSpy.getAssociatedTrainingRuns).toHaveBeenCalledTimes(5);\n    assertPoll(3, 5);\n    subscription.unsubscribe();\n  }));\n\n  function createPagination() {\n    return new RequestedPagination(1, 5, '', '');\n  }\n\n  function createMock() {\n    return new PaginatedResource([], new SentinelPagination(1, 0, 5, 5, 1));\n  }\n\n  function assertPoll(times, initialHaveBeenCalledTimes = 1) {\n    let calledTimes = initialHaveBeenCalledTimes;\n\n    for (let i = 0; i < times; i++) {\n      tick(context.config.pollingPeriod);\n      calledTimes = calledTimes + 1;\n      expect(adaptiveInstanceApiSpy.getAssociatedTrainingRuns).toHaveBeenCalledTimes(calledTimes);\n    }\n  }\n});","map":{"version":3,"sources":["/home/dominik/Desktop/Workspace/FRONTEND/kypo-training-agenda/projects/kypo-training-agenda/adaptive-instance-summary/src/services/state/archived-runs/archived-adaptive-run-concrete.service.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import { async, fakeAsync, TestBed, tick } from '@angular/core/testing';\nimport { MatDialog } from '@angular/material/dialog';\nimport { SentinelPagination, PaginatedResource, RequestedPagination, asyncData } from '@sentinel/common';\nimport { AdaptiveInstanceApi, AdaptiveRunApi, TrainingInstanceApi } from '@muni-kypo-crp/training-api';\nimport { TrainingRunApi } from '@muni-kypo-crp/training-api';\nimport { throwError } from 'rxjs';\nimport { skip, take } from 'rxjs/operators';\nimport {\n  createAdaptiveInstanceApiSpy,\n  createAdaptiveRunApiSpy,\n  createContext,\n  createDialogSpy,\n  createErrorHandlerSpy,\n  createNotificationSpy,\n} from '../../../../../internal/src/testing/testing-commons.spec';\nimport { TrainingErrorHandler } from '../../../../../src/services/training-error.handler.service';\nimport { TrainingNotificationService } from '../../../../../src/services/training-notification.service';\nimport { TrainingAgendaContext } from '../../../../../internal/src/services/context/training-agenda-context.service';\nimport { ArchivedAdaptiveRunConcreteService } from './archived-adaptive-run-concrete.service';\n\ndescribe('ArchivedTrainingRunConcreteService', () => {\n  let errorHandlerSpy: jasmine.SpyObj<TrainingErrorHandler>;\n  let adaptiveInstanceApiSpy: jasmine.SpyObj<AdaptiveInstanceApi>;\n  let adaptiveRunFacadeSpy: jasmine.SpyObj<AdaptiveRunApi>;\n  let dialogSpy: jasmine.SpyObj<MatDialog>;\n  let notificationSpy: jasmine.SpyObj<TrainingNotificationService>;\n  let service: ArchivedAdaptiveRunConcreteService;\n  let context: TrainingAgendaContext;\n\n  beforeEach(async(() => {\n    errorHandlerSpy = createErrorHandlerSpy();\n    adaptiveInstanceApiSpy = createAdaptiveInstanceApiSpy();\n    notificationSpy = createNotificationSpy();\n    adaptiveRunFacadeSpy = createAdaptiveRunApiSpy();\n    dialogSpy = createDialogSpy();\n    context = createContext();\n\n    TestBed.configureTestingModule({\n      providers: [\n        ArchivedAdaptiveRunConcreteService,\n        { provide: MatDialog, useValue: dialogSpy },\n        { provide: AdaptiveInstanceApi, useValue: adaptiveInstanceApiSpy },\n        { provide: TrainingErrorHandler, useValue: errorHandlerSpy },\n        { provide: TrainingNotificationService, useValue: notificationSpy },\n        { provide: TrainingAgendaContext, useValue: context },\n        { provide: AdaptiveRunApi, useValue: adaptiveRunFacadeSpy },\n      ],\n    });\n    service = TestBed.inject(ArchivedAdaptiveRunConcreteService);\n  }));\n\n  it('should be created', () => {\n    expect(service).toBeTruthy();\n  });\n\n  it('should emit hasError observable on err', (done) => {\n    adaptiveInstanceApiSpy.getAssociatedTrainingRuns.and.returnValue(throwError(null));\n\n    service.hasError$\n      .pipe(\n        skip(2) // we ignore initial value and value emitted before the call is made\n      )\n      .subscribe(\n        (hasError) => {\n          expect(hasError).toBeTruthy();\n          done();\n        },\n        () => fail\n      );\n    service.getAll(1, createPagination()).subscribe(\n      () => fail,\n      () => done()\n    );\n  });\n\n  it('should start polling', fakeAsync(() => {\n    const mockData = createMock();\n    adaptiveInstanceApiSpy.getAssociatedTrainingRuns.and.returnValue(asyncData(mockData));\n    service.getAll(1, createPagination()).pipe(take(1)).subscribe();\n    const subscription = service.resource$.subscribe();\n    assertPoll(1);\n    subscription.unsubscribe();\n  }));\n\n  it('should stop polling on error', fakeAsync(() => {\n    const mockData = createMock();\n    adaptiveInstanceApiSpy.getAssociatedTrainingRuns.and.returnValues(\n      asyncData(mockData),\n      asyncData(mockData),\n      asyncData(mockData),\n      throwError(null)\n    );\n\n    service.getAll(1, createPagination()).pipe(take(1)).subscribe();\n    const subscription = service.resource$.subscribe();\n    assertPoll(3);\n    tick(5 * context.config.pollingPeriod);\n    expect(adaptiveInstanceApiSpy.getAssociatedTrainingRuns).toHaveBeenCalledTimes(4);\n    subscription.unsubscribe();\n  }));\n\n  it('should start polling again after request is successful', fakeAsync(() => {\n    const pagination = createPagination();\n    const mockData = createMock();\n    adaptiveInstanceApiSpy.getAssociatedTrainingRuns.and.returnValues(\n      asyncData(mockData),\n      asyncData(mockData),\n      asyncData(mockData),\n      throwError(null),\n      asyncData(mockData),\n      asyncData(mockData),\n      asyncData(mockData),\n      asyncData(mockData)\n    );\n\n    service.getAll(1, pagination).pipe(take(1)).subscribe();\n    const subscription = service.resource$.subscribe();\n    assertPoll(3);\n    tick(context.config.pollingPeriod);\n    expect(adaptiveInstanceApiSpy.getAssociatedTrainingRuns).toHaveBeenCalledTimes(4);\n    tick(5 * context.config.pollingPeriod);\n    expect(adaptiveInstanceApiSpy.getAssociatedTrainingRuns).toHaveBeenCalledTimes(4);\n    service.getAll(0, pagination).pipe(take(1)).subscribe();\n    expect(adaptiveInstanceApiSpy.getAssociatedTrainingRuns).toHaveBeenCalledTimes(5);\n    assertPoll(3, 5);\n    subscription.unsubscribe();\n  }));\n\n  function createPagination() {\n    return new RequestedPagination(1, 5, '', '');\n  }\n\n  function createMock() {\n    return new PaginatedResource([], new SentinelPagination(1, 0, 5, 5, 1));\n  }\n\n  function assertPoll(times: number, initialHaveBeenCalledTimes = 1) {\n    let calledTimes = initialHaveBeenCalledTimes;\n    for (let i = 0; i < times; i++) {\n      tick(context.config.pollingPeriod);\n      calledTimes = calledTimes + 1;\n      expect(adaptiveInstanceApiSpy.getAssociatedTrainingRuns).toHaveBeenCalledTimes(calledTimes);\n    }\n  }\n});\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}