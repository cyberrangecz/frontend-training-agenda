{"ast":null,"code":"import { TestBed } from '@angular/core/testing';\nimport { Router } from '@angular/router';\nimport { RouterTestingModule } from '@angular/router/testing';\nimport { asyncData, PaginatedResource, SentinelPagination, RequestedPagination } from '@sentinel/common';\nimport { PoolApi } from '@muni-kypo-crp/sandbox-api';\nimport { Pool } from '@muni-kypo-crp/sandbox-model';\nimport { TrainingInstanceApi } from '@muni-kypo-crp/training-api';\nimport { TrainingInstance } from '@muni-kypo-crp/training-model';\nimport { throwError } from 'rxjs';\nimport { createContext, createErrorHandlerSpy, createNavigatorSpy, createNotificationSpy, createPoolApiSpy, createRouterSpy, createTrainingInstanceApiSpy } from '../../../../internal/src/testing/testing-commons.spec';\nimport { TrainingErrorHandler } from '../../../../src/services/training-error.handler.service';\nimport { TrainingNavigator } from '../../../../src/services/training-navigator.service';\nimport { TrainingNotificationService } from '../../../../src/services/training-notification.service';\nimport { TrainingAgendaContext } from '../../../../internal/src/services/context/training-agenda-context.service';\nimport { TrainingInstanceOverviewConcreteService } from './training-instance-overview-concrete.service';\ndescribe('TrainingInstanceOverviewConcreteService', () => {\n  let errorHandlerSpy;\n  let trainingInstanceApiSpy;\n  let poolApiSpy;\n  let service;\n  let navigatorSpy;\n  let routerSpy;\n  let notificationSpy;\n  let context;\n  beforeEach(() => {\n    errorHandlerSpy = createErrorHandlerSpy();\n    notificationSpy = createNotificationSpy();\n    trainingInstanceApiSpy = createTrainingInstanceApiSpy();\n    poolApiSpy = createPoolApiSpy();\n    navigatorSpy = createNavigatorSpy();\n    routerSpy = createRouterSpy();\n    context = createContext();\n    TestBed.configureTestingModule({\n      providers: [TrainingInstanceOverviewConcreteService, {\n        provide: TrainingInstanceApi,\n        useValue: trainingInstanceApiSpy\n      }, {\n        provide: PoolApi,\n        useValue: poolApiSpy\n      }, {\n        provide: Router,\n        useValue: routerSpy\n      }, {\n        provide: TrainingErrorHandler,\n        useValue: errorHandlerSpy\n      }, {\n        provide: TrainingNotificationService,\n        useValue: notificationSpy\n      }, {\n        provide: TrainingNavigator,\n        useValue: navigatorSpy\n      }, {\n        provide: TrainingAgendaContext,\n        useValue: context\n      }],\n      imports: [RouterTestingModule]\n    });\n    service = TestBed.inject(TrainingInstanceOverviewConcreteService);\n  });\n  it('should be created', () => {\n    expect(service).toBeTruthy();\n  });\n  it('should get all training instances', done => {\n    const trainingInstances = createInstancesPaginatedMock();\n    trainingInstanceApiSpy.getAll.and.returnValue(asyncData(trainingInstances));\n    service.getAll(createPagination()).subscribe(res => {\n      expect(res).toEqual(trainingInstances);\n      service.resource$.subscribe(val => expect(val).toEqual(trainingInstances));\n      expect(trainingInstanceApiSpy.getAll).toHaveBeenCalledTimes(1);\n      done();\n    }, () => fail);\n  });\n  it('should emit error when get all training instances fails', done => {\n    trainingInstanceApiSpy.getAll.and.returnValue(throwError(null));\n    service.getAll(createPagination()).subscribe(() => fail, err => {\n      expect(errorHandlerSpy.emit).toHaveBeenCalledTimes(1);\n      expect(errorHandlerSpy.emit).toHaveBeenCalledWith(err, jasmine.anything());\n      expect(trainingInstanceApiSpy.getAll).toHaveBeenCalledTimes(1);\n      service.hasError$.subscribe(val => expect(val).toBeTrue());\n      done();\n    });\n  });\n  it('should redirect to training instance creation page', () => {\n    routerSpy.navigate.and.returnValue(asyncData(true).toPromise());\n    navigatorSpy.toNewTrainingInstance.and.returnValue('navigate');\n    service.create().subscribe(() => {\n      expect(routerSpy.navigate).toHaveBeenCalledTimes(1);\n      expect(navigatorSpy.toNewTrainingInstance).toHaveBeenCalledTimes(1);\n    });\n  });\n  it('should redirect to training instance edit page', () => {\n    routerSpy.navigate.and.returnValue(asyncData(true).toPromise());\n    navigatorSpy.toTrainingInstanceEdit.and.returnValue('navigate');\n    service.edit(2).subscribe(() => {\n      expect(routerSpy.navigate).toHaveBeenCalledTimes(1);\n      expect(navigatorSpy.toTrainingInstanceEdit).toHaveBeenCalledTimes(1);\n    });\n  });\n  it('should download training instance', done => {\n    trainingInstanceApiSpy.archive.and.returnValue(asyncData(true));\n    service.download(2).subscribe(res => {\n      expect(trainingInstanceApiSpy.archive).toHaveBeenCalledTimes(1);\n      expect(res).toEqual(true);\n      done();\n    });\n  });\n  it('should delete training instance', done => {\n    trainingInstanceApiSpy.delete.and.returnValue(asyncData(true));\n    trainingInstanceApiSpy.getAll.and.returnValue(asyncData(createInstancesPaginatedMock()));\n    service.delete(2).subscribe(res => {\n      expect(trainingInstanceApiSpy.delete).toHaveBeenCalledTimes(1);\n      expect(res).toEqual(createInstancesPaginatedMock());\n      expect(notificationSpy.emit).toHaveBeenCalledTimes(1);\n      expect(notificationSpy.emit).toHaveBeenCalledWith('success', jasmine.anything());\n      done();\n    }, () => fail);\n  });\n  it('should emit error when  delete training instance fails', done => {\n    trainingInstanceApiSpy.delete.and.returnValue(throwError(null));\n    service.delete(2).subscribe(() => fail, () => {\n      expect(errorHandlerSpy.emit).toHaveBeenCalledTimes(1);\n      expect(trainingInstanceApiSpy.delete).toHaveBeenCalledTimes(1);\n      done();\n    });\n  });\n  it('should get pool state', done => {\n    const pool = createPoolMock();\n    poolApiSpy.getPool.and.returnValue(asyncData(pool));\n    service.getPoolState(2).subscribe(res => {\n      expect(res).toBeTruthy();\n      expect(res).toEqual(`${pool.maxSize} (${pool.maxSize - pool.usedSize} free)`);\n      expect(poolApiSpy.getPool).toHaveBeenCalledTimes(1);\n      done();\n    });\n  });\n\n  function createPagination() {\n    return new RequestedPagination(1, 5, '', '');\n  }\n\n  function createPoolMock() {\n    const pool = new Pool();\n    pool.id = 2;\n    pool.maxSize = 5;\n    pool.usedSize = 2;\n    return pool;\n  }\n\n  function createInstancesPaginatedMock() {\n    const ti1 = new TrainingInstance();\n    ti1.id = 0;\n    const ti2 = new TrainingInstance();\n    ti2.id = 1;\n    return new PaginatedResource([ti1, ti2], new SentinelPagination(1, 2, 2, 2, 1));\n  }\n});","map":{"version":3,"sources":["/home/dominik/Desktop/Workspace/FRONTEND/kypo-training-agenda/projects/kypo-training-agenda/instance-overview/src/services/state/training-instance-overview-concrete.service.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import { TestBed } from '@angular/core/testing';\nimport { Router } from '@angular/router';\nimport { RouterTestingModule } from '@angular/router/testing';\nimport { asyncData, PaginatedResource, SentinelPagination, RequestedPagination } from '@sentinel/common';\nimport { PoolApi } from '@muni-kypo-crp/sandbox-api';\nimport { Pool } from '@muni-kypo-crp/sandbox-model';\nimport { TrainingInstanceApi } from '@muni-kypo-crp/training-api';\nimport { TrainingInstance } from '@muni-kypo-crp/training-model';\nimport { throwError } from 'rxjs';\nimport {\n  createContext,\n  createErrorHandlerSpy,\n  createNavigatorSpy,\n  createNotificationSpy,\n  createPoolApiSpy,\n  createRouterSpy,\n  createTrainingInstanceApiSpy,\n} from '../../../../internal/src/testing/testing-commons.spec';\nimport { TrainingErrorHandler } from '../../../../src/services/training-error.handler.service';\nimport { TrainingNavigator } from '../../../../src/services/training-navigator.service';\nimport { TrainingNotificationService } from '../../../../src/services/training-notification.service';\nimport { TrainingAgendaContext } from '../../../../internal/src/services/context/training-agenda-context.service';\nimport { TrainingInstanceOverviewConcreteService } from './training-instance-overview-concrete.service';\n\ndescribe('TrainingInstanceOverviewConcreteService', () => {\n  let errorHandlerSpy: jasmine.SpyObj<TrainingErrorHandler>;\n  let trainingInstanceApiSpy: jasmine.SpyObj<TrainingInstanceApi>;\n  let poolApiSpy: jasmine.SpyObj<PoolApi>;\n  let service: TrainingInstanceOverviewConcreteService;\n  let navigatorSpy: jasmine.SpyObj<TrainingNavigator>;\n  let routerSpy: jasmine.SpyObj<Router>;\n  let notificationSpy: jasmine.SpyObj<TrainingNotificationService>;\n  let context: TrainingAgendaContext;\n\n  beforeEach(() => {\n    errorHandlerSpy = createErrorHandlerSpy();\n    notificationSpy = createNotificationSpy();\n    trainingInstanceApiSpy = createTrainingInstanceApiSpy();\n    poolApiSpy = createPoolApiSpy();\n    navigatorSpy = createNavigatorSpy();\n    routerSpy = createRouterSpy();\n    context = createContext();\n\n    TestBed.configureTestingModule({\n      providers: [\n        TrainingInstanceOverviewConcreteService,\n        { provide: TrainingInstanceApi, useValue: trainingInstanceApiSpy },\n        { provide: PoolApi, useValue: poolApiSpy },\n        { provide: Router, useValue: routerSpy },\n        { provide: TrainingErrorHandler, useValue: errorHandlerSpy },\n        { provide: TrainingNotificationService, useValue: notificationSpy },\n        { provide: TrainingNavigator, useValue: navigatorSpy },\n        { provide: TrainingAgendaContext, useValue: context },\n      ],\n      imports: [RouterTestingModule],\n    });\n    service = TestBed.inject(TrainingInstanceOverviewConcreteService);\n  });\n\n  it('should be created', () => {\n    expect(service).toBeTruthy();\n  });\n\n  it('should get all training instances', (done) => {\n    const trainingInstances = createInstancesPaginatedMock();\n    trainingInstanceApiSpy.getAll.and.returnValue(asyncData(trainingInstances));\n    service.getAll(createPagination()).subscribe(\n      (res) => {\n        expect(res).toEqual(trainingInstances);\n        service.resource$.subscribe((val) => expect(val).toEqual(trainingInstances));\n        expect(trainingInstanceApiSpy.getAll).toHaveBeenCalledTimes(1);\n        done();\n      },\n      () => fail\n    );\n  });\n\n  it('should emit error when get all training instances fails', (done) => {\n    trainingInstanceApiSpy.getAll.and.returnValue(throwError(null));\n    service.getAll(createPagination()).subscribe(\n      () => fail,\n      (err) => {\n        expect(errorHandlerSpy.emit).toHaveBeenCalledTimes(1);\n        expect(errorHandlerSpy.emit).toHaveBeenCalledWith(err, jasmine.anything());\n        expect(trainingInstanceApiSpy.getAll).toHaveBeenCalledTimes(1);\n        service.hasError$.subscribe((val) => expect(val).toBeTrue());\n        done();\n      }\n    );\n  });\n\n  it('should redirect to training instance creation page', () => {\n    routerSpy.navigate.and.returnValue(asyncData(true).toPromise());\n    navigatorSpy.toNewTrainingInstance.and.returnValue('navigate');\n    service.create().subscribe(() => {\n      expect(routerSpy.navigate).toHaveBeenCalledTimes(1);\n      expect(navigatorSpy.toNewTrainingInstance).toHaveBeenCalledTimes(1);\n    });\n  });\n\n  it('should redirect to training instance edit page', () => {\n    routerSpy.navigate.and.returnValue(asyncData(true).toPromise());\n    navigatorSpy.toTrainingInstanceEdit.and.returnValue('navigate');\n    service.edit(2).subscribe(() => {\n      expect(routerSpy.navigate).toHaveBeenCalledTimes(1);\n      expect(navigatorSpy.toTrainingInstanceEdit).toHaveBeenCalledTimes(1);\n    });\n  });\n\n  it('should download training instance', (done) => {\n    trainingInstanceApiSpy.archive.and.returnValue(asyncData(true));\n    service.download(2).subscribe((res) => {\n      expect(trainingInstanceApiSpy.archive).toHaveBeenCalledTimes(1);\n      expect(res).toEqual(true);\n      done();\n    });\n  });\n\n  it('should delete training instance', (done) => {\n    trainingInstanceApiSpy.delete.and.returnValue(asyncData(true));\n    trainingInstanceApiSpy.getAll.and.returnValue(asyncData(createInstancesPaginatedMock()));\n    service.delete(2).subscribe(\n      (res) => {\n        expect(trainingInstanceApiSpy.delete).toHaveBeenCalledTimes(1);\n        expect(res).toEqual(createInstancesPaginatedMock());\n        expect(notificationSpy.emit).toHaveBeenCalledTimes(1);\n        expect(notificationSpy.emit).toHaveBeenCalledWith('success', jasmine.anything());\n        done();\n      },\n      () => fail\n    );\n  });\n\n  it('should emit error when  delete training instance fails', (done) => {\n    trainingInstanceApiSpy.delete.and.returnValue(throwError(null));\n    service.delete(2).subscribe(\n      () => fail,\n      () => {\n        expect(errorHandlerSpy.emit).toHaveBeenCalledTimes(1);\n        expect(trainingInstanceApiSpy.delete).toHaveBeenCalledTimes(1);\n        done();\n      }\n    );\n  });\n\n  it('should get pool state', (done) => {\n    const pool = createPoolMock();\n    poolApiSpy.getPool.and.returnValue(asyncData(pool));\n    service.getPoolState(2).subscribe((res) => {\n      expect(res).toBeTruthy();\n      expect(res).toEqual(`${pool.maxSize} (${pool.maxSize - pool.usedSize} free)`);\n      expect(poolApiSpy.getPool).toHaveBeenCalledTimes(1);\n      done();\n    });\n  });\n\n  function createPagination() {\n    return new RequestedPagination(1, 5, '', '');\n  }\n\n  function createPoolMock(): Pool {\n    const pool = new Pool();\n    pool.id = 2;\n    pool.maxSize = 5;\n    pool.usedSize = 2;\n    return pool;\n  }\n\n  function createInstancesPaginatedMock(): PaginatedResource<TrainingInstance> {\n    const ti1 = new TrainingInstance();\n    ti1.id = 0;\n    const ti2 = new TrainingInstance();\n    ti2.id = 1;\n    return new PaginatedResource([ti1, ti2], new SentinelPagination(1, 2, 2, 2, 1));\n  }\n});\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}