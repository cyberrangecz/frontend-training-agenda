{"ast":null,"code":"import { SentinelFreeFormModule } from '@sentinel/components/free-form';\nimport { TrainingDefinitionEditComponent } from './training-definition-edit.component';\nimport { TestBed, async } from '@angular/core/testing';\nimport { SimpleChange } from '@angular/core';\nimport { TrainingDefinition, GameLevel, AssessmentLevel, InfoLevel } from '@muni-kypo-crp/training-model';\nimport { TrainingDefinitionChangeEvent } from '../../model/events/training-definition-change-event';\nimport { MaterialTestingModule } from '../../../../internal/src/testing/material-testing.module';\nimport { FormArray, FormControl, FormGroup } from '@angular/forms';\ndescribe('TrainingDefinitionEditComponent', () => {\n  let component;\n  let fixture;\n  beforeEach(async(() => {\n    TestBed.configureTestingModule({\n      imports: [MaterialTestingModule, SentinelFreeFormModule],\n      declarations: [TrainingDefinitionEditComponent]\n    }).compileComponents();\n  }));\n  beforeEach(() => {\n    fixture = TestBed.createComponent(TrainingDefinitionEditComponent);\n    component = fixture.componentInstance;\n  });\n  it('should create', () => {\n    expect(component).toBeTruthy();\n  });\n  it('should create new TD edit form group', () => {\n    component.trainingDefinition = createMock();\n    component.ngOnChanges(createSimpleChanges(createMock()));\n    expect(component.trainingDefinitionEditFormGroup).toBeTruthy();\n  });\n  it('should emit event on change', () => {\n    spyOn(component.edited, 'emit');\n    const td = createMock();\n    component.trainingDefinition = td;\n    component.ngOnChanges(createSimpleChanges(td));\n    component.trainingDefinitionEditFormGroup.formGroup.patchValue({\n      title: 'New Title'\n    });\n    td.title = 'New Title';\n    expect(component.edited.emit).toHaveBeenCalledTimes(1);\n    expect(component.edited.emit).toHaveBeenCalledWith(new TrainingDefinitionChangeEvent(td, true));\n  });\n  it('change form state when prerequisites event is emited', () => {\n    let formGroup = createFormGroupMock(2, 'prerequisite');\n    component.trainingDefinition = createMock();\n    component.ngOnChanges(createSimpleChanges(createMock()));\n    component.prerequisitesChange(formGroup);\n    expect(component.trainingDefinitionEditFormGroup.formGroup.get('prerequisites').value).toEqual(['prerequisite0', 'prerequisite1']);\n    formGroup = createFormGroupMock(1, 'prerequisite');\n    component.prerequisitesChange(formGroup);\n    expect(component.trainingDefinitionEditFormGroup.formGroup.get('prerequisites').value).toEqual(['prerequisite0']);\n    formGroup = createFormGroupMock(0, 'prerequisite');\n    component.prerequisitesChange(formGroup);\n    expect(component.trainingDefinitionEditFormGroup.formGroup.get('prerequisites').value).toEqual([]);\n    formGroup = createFormGroupMock(1, 'prerequisite');\n    component.prerequisitesChange(formGroup);\n    expect(component.trainingDefinitionEditFormGroup.formGroup.get('prerequisites').value).toEqual(['prerequisite0']);\n  });\n  it('change form state when outcomes event is emited', () => {\n    let formGroup = createFormGroupMock(2, 'outcome');\n    component.trainingDefinition = createMock();\n    component.ngOnChanges(createSimpleChanges(createMock()));\n    component.outcomesChange(formGroup);\n    expect(component.trainingDefinitionEditFormGroup.formGroup.get('outcomes').value).toEqual(['outcome0', 'outcome1']);\n    formGroup = createFormGroupMock(1, 'outcome');\n    component.outcomesChange(formGroup);\n    expect(component.trainingDefinitionEditFormGroup.formGroup.get('outcomes').value).toEqual(['outcome0']);\n    formGroup = createFormGroupMock(0, 'outcome');\n    component.outcomesChange(formGroup);\n    expect(component.trainingDefinitionEditFormGroup.formGroup.get('outcomes').value).toEqual([]);\n    formGroup = createFormGroupMock(1, 'outcome');\n    component.outcomesChange(formGroup);\n    expect(component.trainingDefinitionEditFormGroup.formGroup.get('outcomes').value).toEqual(['outcome0']);\n  });\n\n  function createFormGroupMock(amount, name) {\n    const formData = [];\n\n    for (let i = 0; i < amount; i++) {\n      formData.push(name + i);\n    }\n\n    return new FormGroup({\n      items: new FormArray(formData.map(prereq => new FormControl(prereq)))\n    });\n  }\n\n  function createMock() {\n    const td = new TrainingDefinition();\n    td.id = 2;\n    td.title = 'TD 2';\n    td.levels = createLevelsMock();\n    td.description = '';\n    td.prerequisites = [];\n    return td;\n  }\n\n  function createLevelsMock() {\n    const level1 = new GameLevel();\n    const level2 = new AssessmentLevel();\n    const level3 = new InfoLevel();\n    return [level1, level2, level3];\n  }\n\n  function createSimpleChanges(resource) {\n    const simpleChange = new SimpleChange(undefined, resource, true);\n    return {\n      trainingDefinition: simpleChange\n    };\n  }\n});","map":{"version":3,"sources":["/home/dominik/Desktop/Workspace/FRONTEND/kypo-training-agenda/projects/kypo-training-agenda/definition-edit/src/components/definition/training-definition-edit.component.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import { SentinelFreeFormModule } from '@sentinel/components/free-form';\nimport { TrainingDefinitionEditComponent } from './training-definition-edit.component';\nimport { ComponentFixture, TestBed, async } from '@angular/core/testing';\nimport { SimpleChanges, SimpleChange } from '@angular/core';\nimport { TrainingDefinition, GameLevel, Level, AssessmentLevel, InfoLevel } from '@muni-kypo-crp/training-model';\nimport { TrainingDefinitionChangeEvent } from '../../model/events/training-definition-change-event';\nimport { MaterialTestingModule } from '../../../../internal/src/testing/material-testing.module';\nimport { FormArray, FormControl, FormGroup } from '@angular/forms';\n\ndescribe('TrainingDefinitionEditComponent', () => {\n  let component: TrainingDefinitionEditComponent;\n  let fixture: ComponentFixture<TrainingDefinitionEditComponent>;\n\n  beforeEach(async(() => {\n    TestBed.configureTestingModule({\n      imports: [MaterialTestingModule, SentinelFreeFormModule],\n      declarations: [TrainingDefinitionEditComponent],\n    }).compileComponents();\n  }));\n\n  beforeEach(() => {\n    fixture = TestBed.createComponent(TrainingDefinitionEditComponent);\n    component = fixture.componentInstance;\n  });\n\n  it('should create', () => {\n    expect(component).toBeTruthy();\n  });\n\n  it('should create new TD edit form group', () => {\n    component.trainingDefinition = createMock();\n    component.ngOnChanges(createSimpleChanges(createMock()));\n    expect(component.trainingDefinitionEditFormGroup).toBeTruthy();\n  });\n\n  it('should emit event on change', () => {\n    spyOn(component.edited, 'emit');\n    const td = createMock();\n    component.trainingDefinition = td;\n    component.ngOnChanges(createSimpleChanges(td));\n    component.trainingDefinitionEditFormGroup.formGroup.patchValue({ title: 'New Title' });\n    td.title = 'New Title';\n    expect(component.edited.emit).toHaveBeenCalledTimes(1);\n    expect(component.edited.emit).toHaveBeenCalledWith(new TrainingDefinitionChangeEvent(td, true));\n  });\n\n  it('change form state when prerequisites event is emited', () => {\n    let formGroup = createFormGroupMock(2, 'prerequisite');\n    component.trainingDefinition = createMock();\n    component.ngOnChanges(createSimpleChanges(createMock()));\n    component.prerequisitesChange(formGroup);\n    expect(component.trainingDefinitionEditFormGroup.formGroup.get('prerequisites').value).toEqual([\n      'prerequisite0',\n      'prerequisite1',\n    ]);\n\n    formGroup = createFormGroupMock(1, 'prerequisite');\n    component.prerequisitesChange(formGroup);\n    expect(component.trainingDefinitionEditFormGroup.formGroup.get('prerequisites').value).toEqual(['prerequisite0']);\n\n    formGroup = createFormGroupMock(0, 'prerequisite');\n    component.prerequisitesChange(formGroup);\n    expect(component.trainingDefinitionEditFormGroup.formGroup.get('prerequisites').value).toEqual([]);\n\n    formGroup = createFormGroupMock(1, 'prerequisite');\n    component.prerequisitesChange(formGroup);\n    expect(component.trainingDefinitionEditFormGroup.formGroup.get('prerequisites').value).toEqual(['prerequisite0']);\n  });\n\n  it('change form state when outcomes event is emited', () => {\n    let formGroup = createFormGroupMock(2, 'outcome');\n    component.trainingDefinition = createMock();\n    component.ngOnChanges(createSimpleChanges(createMock()));\n    component.outcomesChange(formGroup);\n    expect(component.trainingDefinitionEditFormGroup.formGroup.get('outcomes').value).toEqual(['outcome0', 'outcome1']);\n\n    formGroup = createFormGroupMock(1, 'outcome');\n    component.outcomesChange(formGroup);\n    expect(component.trainingDefinitionEditFormGroup.formGroup.get('outcomes').value).toEqual(['outcome0']);\n\n    formGroup = createFormGroupMock(0, 'outcome');\n    component.outcomesChange(formGroup);\n    expect(component.trainingDefinitionEditFormGroup.formGroup.get('outcomes').value).toEqual([]);\n\n    formGroup = createFormGroupMock(1, 'outcome');\n    component.outcomesChange(formGroup);\n    expect(component.trainingDefinitionEditFormGroup.formGroup.get('outcomes').value).toEqual(['outcome0']);\n  });\n\n  function createFormGroupMock(amount: number, name: string): FormGroup {\n    const formData: string[] = [];\n    for (let i = 0; i < amount; i++) {\n      formData.push(name + i);\n    }\n    return new FormGroup({\n      items: new FormArray(formData.map((prereq) => new FormControl(prereq))),\n    });\n  }\n\n  function createMock(): TrainingDefinition {\n    const td = new TrainingDefinition();\n    td.id = 2;\n    td.title = 'TD 2';\n    td.levels = createLevelsMock();\n    td.description = '';\n    td.prerequisites = [];\n    return td;\n  }\n\n  function createLevelsMock(): Level[] {\n    const level1 = new GameLevel();\n    const level2 = new AssessmentLevel();\n    const level3 = new InfoLevel();\n    return [level1, level2, level3];\n  }\n\n  function createSimpleChanges(resource: TrainingDefinition): SimpleChanges {\n    const simpleChange = new SimpleChange(undefined, resource, true);\n    return { trainingDefinition: simpleChange } as SimpleChanges;\n  }\n});\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}