{"ast":null,"code":"import { async, TestBed } from '@angular/core/testing';\nimport { Router } from '@angular/router';\nimport { asyncData } from '@sentinel/common';\nimport { TrainingInstance } from '@muni-kypo-crp/training-model';\nimport { createContext, createNavigatorSpy, createRouterSpy } from '../../../../../internal/src/testing/testing-commons.spec';\nimport { TrainingNavigator } from '../../../../../src/services/training-navigator.service';\nimport { TrainingAgendaContext } from '../../../../../internal/src/services/context/training-agenda-context.service';\nimport { TrainingInstanceSummaryConcreteService } from './training-instance-summary-concrete.service';\ndescribe('TrainingInstanceSummaryConcreteService', () => {\n  let routerSpy;\n  let navigatorSpy;\n  let service;\n  let context;\n  beforeEach(async(() => {\n    routerSpy = createRouterSpy();\n    navigatorSpy = createNavigatorSpy();\n    context = createContext();\n    TestBed.configureTestingModule({\n      providers: [TrainingInstanceSummaryConcreteService, {\n        provide: TrainingNavigator,\n        useValue: navigatorSpy\n      }, {\n        provide: Router,\n        useValue: routerSpy\n      }, {\n        provide: TrainingAgendaContext,\n        useValue: context\n      }]\n    });\n    service = TestBed.inject(TrainingInstanceSummaryConcreteService);\n  }));\n  it('should be created', () => {\n    expect(service).toBeTruthy();\n  });\n  it('should init service', done => {\n    const trainingInstance = createMock();\n    spyOn(trainingInstance, 'hasStarted').and.returnValue(true);\n    service.init(trainingInstance);\n    service.hasStarted$.subscribe(res => {\n      expect(res).toBeTruthy();\n      done();\n    });\n  });\n  it('should show progress', done => {\n    const trainingInstance = createMock();\n    routerSpy.navigate.and.returnValue(asyncData(true).toPromise());\n    navigatorSpy.toTrainingInstanceProgress.and.returnValue('navigate');\n    service.init(trainingInstance);\n    service.showProgress().subscribe(res => {\n      expect(res).toBeTruthy();\n      expect(routerSpy.navigate).toHaveBeenCalledTimes(1);\n      expect(navigatorSpy.toTrainingInstanceProgress).toHaveBeenCalledTimes(1);\n      done();\n    });\n  });\n  it('should show results', done => {\n    const trainingInstance = createMock();\n    routerSpy.navigate.and.returnValue(asyncData(true).toPromise());\n    navigatorSpy.toTrainingInstanceResults.and.returnValue('navigate');\n    service.init(trainingInstance);\n    service.showResults().subscribe(res => {\n      expect(res).toBeTruthy();\n      expect(routerSpy.navigate).toHaveBeenCalledTimes(1);\n      expect(navigatorSpy.toTrainingInstanceResults).toHaveBeenCalledTimes(1);\n      done();\n    });\n  });\n\n  function createMock() {\n    const trainingInstance = new TrainingInstance();\n    trainingInstance.id = 2;\n    trainingInstance.startTime = new Date();\n    return trainingInstance;\n  }\n});","map":{"version":3,"sources":["/home/dominik/Desktop/Workspace/FRONTEND/kypo-training-agenda/projects/kypo-training-agenda/instance-summary/src/services/state/summary/training-instace-summary-concrete.service.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import { async, TestBed } from '@angular/core/testing';\nimport { Router } from '@angular/router';\nimport { asyncData } from '@sentinel/common';\nimport { TrainingInstance } from '@muni-kypo-crp/training-model';\nimport {\n  createContext,\n  createNavigatorSpy,\n  createRouterSpy,\n} from '../../../../../internal/src/testing/testing-commons.spec';\nimport { TrainingNavigator } from '../../../../../src/services/training-navigator.service';\nimport { TrainingAgendaContext } from '../../../../../internal/src/services/context/training-agenda-context.service';\nimport { TrainingInstanceSummaryConcreteService } from './training-instance-summary-concrete.service';\n\ndescribe('TrainingInstanceSummaryConcreteService', () => {\n  let routerSpy: jasmine.SpyObj<Router>;\n  let navigatorSpy: jasmine.SpyObj<TrainingNavigator>;\n  let service: TrainingInstanceSummaryConcreteService;\n  let context: TrainingAgendaContext;\n\n  beforeEach(async(() => {\n    routerSpy = createRouterSpy();\n    navigatorSpy = createNavigatorSpy();\n    context = createContext();\n\n    TestBed.configureTestingModule({\n      providers: [\n        TrainingInstanceSummaryConcreteService,\n        { provide: TrainingNavigator, useValue: navigatorSpy },\n        { provide: Router, useValue: routerSpy },\n        { provide: TrainingAgendaContext, useValue: context },\n      ],\n    });\n    service = TestBed.inject(TrainingInstanceSummaryConcreteService);\n  }));\n\n  it('should be created', () => {\n    expect(service).toBeTruthy();\n  });\n\n  it('should init service', (done) => {\n    const trainingInstance = createMock();\n    spyOn(trainingInstance, 'hasStarted').and.returnValue(true);\n    service.init(trainingInstance);\n    service.hasStarted$.subscribe((res) => {\n      expect(res).toBeTruthy();\n      done();\n    });\n  });\n\n  it('should show progress', (done) => {\n    const trainingInstance = createMock();\n    routerSpy.navigate.and.returnValue(asyncData(true).toPromise());\n    navigatorSpy.toTrainingInstanceProgress.and.returnValue('navigate');\n    service.init(trainingInstance);\n    service.showProgress().subscribe((res) => {\n      expect(res).toBeTruthy();\n      expect(routerSpy.navigate).toHaveBeenCalledTimes(1);\n      expect(navigatorSpy.toTrainingInstanceProgress).toHaveBeenCalledTimes(1);\n      done();\n    });\n  });\n\n  it('should show results', (done) => {\n    const trainingInstance = createMock();\n    routerSpy.navigate.and.returnValue(asyncData(true).toPromise());\n    navigatorSpy.toTrainingInstanceResults.and.returnValue('navigate');\n    service.init(trainingInstance);\n    service.showResults().subscribe((res) => {\n      expect(res).toBeTruthy();\n      expect(routerSpy.navigate).toHaveBeenCalledTimes(1);\n      expect(navigatorSpy.toTrainingInstanceResults).toHaveBeenCalledTimes(1);\n      done();\n    });\n  });\n\n  function createMock(): TrainingInstance {\n    const trainingInstance = new TrainingInstance();\n    trainingInstance.id = 2;\n    trainingInstance.startTime = new Date();\n    return trainingInstance;\n  }\n});\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}