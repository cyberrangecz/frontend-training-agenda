{"ast":null,"code":"import { async, TestBed } from '@angular/core/testing';\nimport { Router } from '@angular/router';\nimport { RouterTestingModule } from '@angular/router/testing';\nimport { RequestedPagination } from '@sentinel/common';\nimport { AdaptiveRunApi, TrainingRunApi } from '@muni-kypo-crp/training-api';\nimport { throwError } from 'rxjs';\nimport { skip } from 'rxjs/operators';\nimport { createAdaptiveRunApiSpy, createContext, createErrorHandlerSpy, createNavigatorSpy, createRouterSpy, createTrainingRunApiSpy } from '../../../../../internal/src/testing/testing-commons.spec';\nimport { TrainingErrorHandler } from '../../../../../src/services/training-error.handler.service';\nimport { TrainingNavigator } from '../../../../../src/services/training-navigator.service';\nimport { TrainingAgendaContext } from '../../../../../internal/src/services/context/training-agenda-context.service';\nimport { AccessedTrainingRunConcreteService } from './accessed-training-run-concrete.service';\nimport { AccessedAdaptiveRunConcreteService } from '../adaptive/accessed-adaptive-run-concrete.service';\ndescribe('AccessedTrainingRunConcreteService', () => {\n  let service;\n  let errorHandlerSpy;\n  let trainingApiSpy;\n  let adaptiveApiSpy;\n  let navigatorSpy;\n  let routerSpy;\n  let context;\n  beforeEach(async(() => {\n    errorHandlerSpy = createErrorHandlerSpy();\n    trainingApiSpy = createTrainingRunApiSpy();\n    adaptiveApiSpy = createAdaptiveRunApiSpy();\n    navigatorSpy = createNavigatorSpy();\n    routerSpy = createRouterSpy();\n    context = createContext();\n    TestBed.configureTestingModule({\n      imports: [RouterTestingModule],\n      providers: [AccessedTrainingRunConcreteService, AccessedAdaptiveRunConcreteService, {\n        provide: TrainingRunApi,\n        useValue: trainingApiSpy\n      }, {\n        provide: AdaptiveRunApi,\n        useValue: adaptiveApiSpy\n      }, {\n        provide: TrainingErrorHandler,\n        useValue: errorHandlerSpy\n      }, {\n        provide: TrainingAgendaContext,\n        useValue: context\n      }, {\n        provide: TrainingNavigator,\n        useValue: navigatorSpy\n      }, {\n        provide: Router,\n        useValue: routerSpy\n      }]\n    });\n    service = TestBed.inject(AccessedTrainingRunConcreteService);\n  }));\n  it('should be created', () => {\n    expect(service).toBeTruthy();\n  });\n  it('should call error handler on err', done => {\n    trainingApiSpy.getAccessed.and.returnValue(throwError(null));\n    service.getAll(createPagination()).subscribe(() => fail, () => {\n      expect(errorHandlerSpy.emit).toHaveBeenCalledTimes(1);\n      done();\n    });\n    expect(trainingApiSpy.getAccessed).toHaveBeenCalledTimes(1);\n  });\n  it('should emit hasError observable on err', done => {\n    trainingApiSpy.getAccessed.and.returnValue(throwError(null));\n    service.hasError$.pipe(skip(2) // we ignore initial value and value emitted before the call is made\n    ).subscribe(hasError => {\n      expect(hasError).toBeTruthy();\n      done();\n    }, () => fail);\n    service.getAll(createPagination()).subscribe(() => fail, () => done());\n  });\n\n  function createPagination() {\n    return new RequestedPagination(1, 5, '', '');\n  }\n});","map":{"version":3,"sources":["/home/dominik/Desktop/Workspace/FRONTEND/kypo-training-agenda/projects/kypo-training-agenda/run-overview/src/services/state/training/accessed-training-run-concrete.service.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import { async, TestBed } from '@angular/core/testing';\nimport { Router } from '@angular/router';\nimport { RouterTestingModule } from '@angular/router/testing';\nimport { RequestedPagination } from '@sentinel/common';\nimport { AdaptiveRunApi, TrainingRunApi } from '@muni-kypo-crp/training-api';\nimport { throwError } from 'rxjs';\nimport { skip } from 'rxjs/operators';\nimport {\n  createAdaptiveRunApiSpy,\n  createContext,\n  createErrorHandlerSpy,\n  createNavigatorSpy,\n  createRouterSpy,\n  createTrainingRunApiSpy,\n} from '../../../../../internal/src/testing/testing-commons.spec';\nimport { TrainingErrorHandler } from '../../../../../src/services/training-error.handler.service';\nimport { TrainingNavigator } from '../../../../../src/services/training-navigator.service';\nimport { TrainingAgendaContext } from '../../../../../internal/src/services/context/training-agenda-context.service';\nimport { AccessedTrainingRunConcreteService } from './accessed-training-run-concrete.service';\nimport { AccessedAdaptiveRunConcreteService } from '../adaptive/accessed-adaptive-run-concrete.service';\n\ndescribe('AccessedTrainingRunConcreteService', () => {\n  let service: AccessedTrainingRunConcreteService;\n  let errorHandlerSpy: jasmine.SpyObj<TrainingErrorHandler>;\n  let trainingApiSpy: jasmine.SpyObj<TrainingRunApi>;\n  let adaptiveApiSpy: jasmine.SpyObj<AdaptiveRunApi>;\n  let navigatorSpy: jasmine.SpyObj<TrainingNavigator>;\n  let routerSpy: jasmine.SpyObj<Router>;\n  let context: TrainingAgendaContext;\n\n  beforeEach(async(() => {\n    errorHandlerSpy = createErrorHandlerSpy();\n    trainingApiSpy = createTrainingRunApiSpy();\n    adaptiveApiSpy = createAdaptiveRunApiSpy();\n    navigatorSpy = createNavigatorSpy();\n    routerSpy = createRouterSpy();\n    context = createContext();\n\n    TestBed.configureTestingModule({\n      imports: [RouterTestingModule],\n      providers: [\n        AccessedTrainingRunConcreteService,\n        AccessedAdaptiveRunConcreteService,\n        { provide: TrainingRunApi, useValue: trainingApiSpy },\n        { provide: AdaptiveRunApi, useValue: adaptiveApiSpy },\n        { provide: TrainingErrorHandler, useValue: errorHandlerSpy },\n        { provide: TrainingAgendaContext, useValue: context },\n        { provide: TrainingNavigator, useValue: navigatorSpy },\n        { provide: Router, useValue: routerSpy },\n      ],\n    });\n    service = TestBed.inject(AccessedTrainingRunConcreteService);\n  }));\n\n  it('should be created', () => {\n    expect(service).toBeTruthy();\n  });\n\n  it('should call error handler on err', (done) => {\n    trainingApiSpy.getAccessed.and.returnValue(throwError(null));\n\n    service.getAll(createPagination()).subscribe(\n      () => fail,\n      () => {\n        expect(errorHandlerSpy.emit).toHaveBeenCalledTimes(1);\n        done();\n      }\n    );\n    expect(trainingApiSpy.getAccessed).toHaveBeenCalledTimes(1);\n  });\n\n  it('should emit hasError observable on err', (done) => {\n    trainingApiSpy.getAccessed.and.returnValue(throwError(null));\n\n    service.hasError$\n      .pipe(\n        skip(2) // we ignore initial value and value emitted before the call is made\n      )\n      .subscribe(\n        (hasError) => {\n          expect(hasError).toBeTruthy();\n          done();\n        },\n        () => fail\n      );\n    service.getAll(createPagination()).subscribe(\n      () => fail,\n      () => done()\n    );\n  });\n\n  function createPagination() {\n    return new RequestedPagination(1, 5, '', '');\n  }\n});\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}