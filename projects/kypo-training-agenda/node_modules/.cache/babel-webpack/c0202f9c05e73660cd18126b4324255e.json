{"ast":null,"code":"import { TestBed } from '@angular/core/testing';\nimport { MatDialog, MatDialogModule } from '@angular/material/dialog';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { SentinelDialogResultEnum } from '@sentinel/components/dialogs';\nimport { asyncData } from '@sentinel/common';\nimport { GameLevel, Hint } from '@muni-kypo-crp/training-model';\nimport { of } from 'rxjs';\nimport { createContext, createDialogSpy, createRunningTrainingRunServiceSpy } from '../../../internal/src/testing/testing-commons.spec';\nimport { TrainingAgendaContext } from '../../../internal/src/services/context/training-agenda-context.service';\nimport { RunningTrainingRunService } from '../../../internal/src/services/training-run/running/running-training-run.service';\nimport { PreviewGameLevelService } from './preview-game-level.service';\ndescribe('PreviewGameLevelService', () => {\n  let service;\n  let context;\n  let dialogSpy;\n  let runningTrainingRunSpy;\n  beforeEach(() => {\n    dialogSpy = createDialogSpy();\n    runningTrainingRunSpy = createRunningTrainingRunServiceSpy();\n    context = createContext();\n    TestBed.configureTestingModule({\n      providers: [PreviewGameLevelService, {\n        provide: RunningTrainingRunService,\n        useValue: runningTrainingRunSpy\n      }, {\n        provide: TrainingAgendaContext,\n        useValue: context\n      }, {\n        provide: MatDialog,\n        useValue: dialogSpy\n      }],\n      imports: [MatDialogModule, BrowserAnimationsModule]\n    });\n    service = TestBed.inject(PreviewGameLevelService);\n  });\n  it('should be created', () => {\n    expect(service).toBeTruthy();\n  });\n  it('should reveal solution', () => {\n    const dialogRefSpyObj = jasmine.createSpyObj({\n      afterClosed: of(SentinelDialogResultEnum.CONFIRMED),\n      close: null\n    });\n    dialogSpy.open.and.returnValue(dialogRefSpyObj);\n    const gameLevel = createMock();\n    service.init(gameLevel);\n    service.revealSolution(gameLevel).subscribe(res => {\n      expect(res).toBeTruthy();\n      expect(res).toEqual(gameLevel.solution);\n    });\n  });\n  it('should reveal hint', () => {\n    const dialogRefSpyObj = jasmine.createSpyObj({\n      afterClosed: of(SentinelDialogResultEnum.CONFIRMED),\n      close: null\n    });\n    dialogSpy.open.and.returnValue(dialogRefSpyObj);\n    const gameLevel = createMock();\n    service.init(gameLevel);\n    service.revealHint(createHints()[1]).subscribe(res => {\n      expect(res).toBeTruthy();\n      expect(res).toEqual(createHints()[1]);\n    });\n  });\n  it('should submit flag', done => {\n    const flag = 'flag';\n    const gameLevel = createMock();\n    runningTrainingRunSpy.next.and.returnValue(asyncData(flag));\n    service.init(gameLevel);\n    service.submitFlag(flag).subscribe(res => {\n      expect(res).toBeTruthy();\n      expect(res).toEqual(flag);\n      done();\n    });\n  });\n  it('should submit wrong flag', () => {\n    const dialogRefSpyObj = jasmine.createSpyObj({\n      afterClosed: of(SentinelDialogResultEnum.CONFIRMED),\n      close: null\n    });\n    dialogSpy.open.and.returnValue(dialogRefSpyObj);\n    const flag = 'wrong flag';\n    const gameLevel = createMock();\n    service.init(gameLevel);\n    service.submitFlag(flag).subscribe(res => {\n      expect(res).toBeTruthy();\n      expect(res).toEqual(SentinelDialogResultEnum.CONFIRMED);\n    });\n  });\n\n  function createMock() {\n    const gameLevel = new GameLevel();\n    gameLevel.id = 0;\n    gameLevel.solution = 'solution';\n    gameLevel.hints = createHints();\n    gameLevel.flag = 'flag';\n    gameLevel.solutionPenalized = false;\n    return gameLevel;\n  }\n\n  function createHints() {\n    const hint1 = new Hint();\n    hint1.id = 0;\n    hint1.content = 'Hint 1 content';\n    const hint2 = new Hint();\n    hint2.id = 1;\n    hint2.content = 'Hint 2 content';\n    const hint3 = new Hint();\n    hint3.id = 2;\n    hint3.content = 'Hint 3 content';\n    return [hint1, hint2, hint3];\n  }\n});","map":{"version":3,"sources":["/home/dominik/Desktop/Workspace/FRONTEND/kypo-training-agenda/projects/kypo-training-agenda/definition-preview/src/services/preview-game-level.service.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import { TestBed } from '@angular/core/testing';\nimport { MatDialog, MatDialogModule } from '@angular/material/dialog';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { SentinelDialogResultEnum } from '@sentinel/components/dialogs';\nimport { asyncData } from '@sentinel/common';\nimport { GameLevel, Hint } from '@muni-kypo-crp/training-model';\nimport { of } from 'rxjs';\nimport {\n  createContext,\n  createDialogSpy,\n  createRunningTrainingRunServiceSpy,\n} from '../../../internal/src/testing/testing-commons.spec';\nimport { TrainingAgendaContext } from '../../../internal/src/services/context/training-agenda-context.service';\nimport { RunningTrainingRunService } from '../../../internal/src/services/training-run/running/running-training-run.service';\nimport { PreviewGameLevelService } from './preview-game-level.service';\n\ndescribe('PreviewGameLevelService', () => {\n  let service: PreviewGameLevelService;\n  let context: TrainingAgendaContext;\n  let dialogSpy: jasmine.SpyObj<MatDialog>;\n  let runningTrainingRunSpy: jasmine.SpyObj<RunningTrainingRunService>;\n\n  beforeEach(() => {\n    dialogSpy = createDialogSpy();\n    runningTrainingRunSpy = createRunningTrainingRunServiceSpy();\n    context = createContext();\n\n    TestBed.configureTestingModule({\n      providers: [\n        PreviewGameLevelService,\n        { provide: RunningTrainingRunService, useValue: runningTrainingRunSpy },\n        { provide: TrainingAgendaContext, useValue: context },\n        { provide: MatDialog, useValue: dialogSpy },\n      ],\n      imports: [MatDialogModule, BrowserAnimationsModule],\n    });\n    service = TestBed.inject(PreviewGameLevelService);\n  });\n\n  it('should be created', () => {\n    expect(service).toBeTruthy();\n  });\n\n  it('should reveal solution', () => {\n    const dialogRefSpyObj = jasmine.createSpyObj({ afterClosed: of(SentinelDialogResultEnum.CONFIRMED), close: null });\n    dialogSpy.open.and.returnValue(dialogRefSpyObj);\n    const gameLevel = createMock();\n    service.init(gameLevel);\n    service.revealSolution(gameLevel).subscribe((res) => {\n      expect(res).toBeTruthy();\n      expect(res).toEqual(gameLevel.solution);\n    });\n  });\n\n  it('should reveal hint', () => {\n    const dialogRefSpyObj = jasmine.createSpyObj({ afterClosed: of(SentinelDialogResultEnum.CONFIRMED), close: null });\n    dialogSpy.open.and.returnValue(dialogRefSpyObj);\n    const gameLevel = createMock();\n    service.init(gameLevel);\n    service.revealHint(createHints()[1]).subscribe((res) => {\n      expect(res).toBeTruthy();\n      expect(res).toEqual(createHints()[1]);\n    });\n  });\n\n  it('should submit flag', (done) => {\n    const flag = 'flag';\n    const gameLevel = createMock();\n    runningTrainingRunSpy.next.and.returnValue(asyncData(flag));\n    service.init(gameLevel);\n    service.submitFlag(flag).subscribe((res) => {\n      expect(res).toBeTruthy();\n      expect(res).toEqual(flag);\n      done();\n    });\n  });\n\n  it('should submit wrong flag', () => {\n    const dialogRefSpyObj = jasmine.createSpyObj({ afterClosed: of(SentinelDialogResultEnum.CONFIRMED), close: null });\n    dialogSpy.open.and.returnValue(dialogRefSpyObj);\n    const flag = 'wrong flag';\n    const gameLevel = createMock();\n    service.init(gameLevel);\n    service.submitFlag(flag).subscribe((res) => {\n      expect(res).toBeTruthy();\n      expect(res).toEqual(SentinelDialogResultEnum.CONFIRMED);\n    });\n  });\n\n  function createMock(): GameLevel {\n    const gameLevel = new GameLevel();\n    gameLevel.id = 0;\n    gameLevel.solution = 'solution';\n    gameLevel.hints = createHints();\n    gameLevel.flag = 'flag';\n    gameLevel.solutionPenalized = false;\n    return gameLevel;\n  }\n\n  function createHints(): Hint[] {\n    const hint1 = new Hint();\n    hint1.id = 0;\n    hint1.content = 'Hint 1 content';\n    const hint2 = new Hint();\n    hint2.id = 1;\n    hint2.content = 'Hint 2 content';\n    const hint3 = new Hint();\n    hint3.id = 2;\n    hint3.content = 'Hint 3 content';\n    return [hint1, hint2, hint3];\n  }\n});\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}