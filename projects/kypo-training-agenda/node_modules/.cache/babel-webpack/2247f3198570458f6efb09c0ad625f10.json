{"ast":null,"code":"import { TestBed } from '@angular/core/testing';\nimport { Router } from '@angular/router';\nimport { RouterTestingModule } from '@angular/router/testing';\nimport { asyncData } from '@sentinel/common';\nimport { TrainingRunApi } from '@muni-kypo-crp/training-api';\nimport { AccessTrainingRunInfo, Level } from '@muni-kypo-crp/training-model';\nimport { throwError } from 'rxjs';\nimport { createContext, createDialogSpy, createErrorHandlerSpy, createNavigatorSpy, createRouterSpy, createTrainingRunApiSpy } from '../../../testing/testing-commons.spec';\nimport { TrainingErrorHandler } from '../../../../../src/services/training-error.handler.service';\nimport { TrainingNavigator } from '../../../../../src/services/training-navigator.service';\nimport { TrainingAgendaContext } from '../../context/training-agenda-context.service';\nimport { RunningTrainingRunConcreteService } from './running-training-run-concrete.service';\nimport { MatDialog } from '@angular/material/dialog';\ndescribe('RunningTrainingRunConcreteService', () => {\n  let errorHandlerSpy;\n  let apiSpy;\n  let service;\n  let navigatorSpy;\n  let routerSpy;\n  let dialogSpy;\n  let context;\n  beforeEach(() => {\n    errorHandlerSpy = createErrorHandlerSpy();\n    apiSpy = createTrainingRunApiSpy();\n    navigatorSpy = createNavigatorSpy();\n    routerSpy = createRouterSpy();\n    dialogSpy = createDialogSpy();\n    context = createContext();\n    TestBed.configureTestingModule({\n      providers: [RunningTrainingRunConcreteService, {\n        provide: TrainingRunApi,\n        useValue: apiSpy\n      }, {\n        provide: Router,\n        useValue: routerSpy\n      }, {\n        provide: MatDialog,\n        useValue: dialogSpy\n      }, {\n        provide: TrainingErrorHandler,\n        useValue: errorHandlerSpy\n      }, {\n        provide: TrainingNavigator,\n        useValue: navigatorSpy\n      }, {\n        provide: TrainingAgendaContext,\n        useValue: context\n      }],\n      imports: [RouterTestingModule]\n    });\n    service = TestBed.inject(RunningTrainingRunConcreteService);\n  });\n  it('should be created', () => {\n    expect(service).toBeTruthy();\n  });\n  it('should initialze service', () => {\n    const accessInfo = createAccessTrainingRunInfoMock();\n    service.init(accessInfo);\n    expect(service.getLevels()).toEqual(createLevelsMock());\n    expect(service.getStartTime()).toEqual(accessInfo.startTime);\n    expect(service.getActiveLevel()).toEqual(accessInfo.currentLevel);\n    expect(service.getActiveLevelPosition()).toEqual(1);\n    expect(service.getIsStepperDisplayed()).toBeTrue();\n  });\n  it('should move to next level', done => {\n    const accessInfo = createAccessTrainingRunInfoMock();\n    const nextLevel = createLevelsMock()[2];\n    apiSpy.nextLevel.and.returnValue(asyncData(nextLevel));\n    service.init(accessInfo);\n    service.next().subscribe(res => {\n      expect(res).toBeTruthy();\n      expect(res).toEqual(nextLevel);\n      expect(apiSpy.nextLevel).toHaveBeenCalledTimes(1);\n      expect(service.getActiveLevel()).toEqual(nextLevel);\n      done();\n    }, () => fail);\n  });\n  it('should emit error when move to next level fails', done => {\n    const accessInfo = createAccessTrainingRunInfoMock();\n    apiSpy.nextLevel.and.returnValue(throwError(null));\n    service.init(accessInfo);\n    service.next().subscribe(() => fail, err => {\n      expect(errorHandlerSpy.emit).toHaveBeenCalledTimes(1);\n      expect(errorHandlerSpy.emit).toHaveBeenCalledWith(err, jasmine.anything());\n      done();\n    });\n  });\n  it('should throw error when finish when next is called on last level and fails', done => {\n    const accessInfo = createAccessTrainingRunInfoMock();\n    apiSpy.finish.and.returnValue(throwError(null));\n    accessInfo.currentLevel = createLevelsMock()[2];\n    service.init(accessInfo);\n    service.next().subscribe(() => fail, err => {\n      expect(errorHandlerSpy.emit).toHaveBeenCalledTimes(1);\n      expect(errorHandlerSpy.emit).toHaveBeenCalledWith(err, jasmine.anything());\n      done();\n    });\n  });\n  it('should clear current TR attributes', () => {\n    const accessInfo = createAccessTrainingRunInfoMock();\n    service.init(accessInfo);\n    service.clear();\n    expect(service.trainingRunId).toBeFalsy();\n    expect(service.sandboxInstanceId).toBeFalsy();\n    expect(service.getStartTime()).toBeFalsy();\n    expect(service.getLevels().length).toEqual(0);\n    service.activeLevel$.subscribe(res => expect(res).toBeFalsy());\n  });\n\n  function createAccessTrainingRunInfoMock() {\n    const accessInfo = new AccessTrainingRunInfo();\n    accessInfo.trainingRunId = 2;\n    accessInfo.sandboxInstanceId = 4;\n    accessInfo.levels = createLevelsMock();\n    accessInfo.startTime = new Date();\n    accessInfo.currentLevel = createLevelsMock()[1];\n    accessInfo.isStepperDisplayed = true;\n    return accessInfo;\n  }\n\n  function createLevelsMock() {\n    const level1 = new DummyLevel();\n    level1.id = 0;\n    const level2 = new DummyLevel();\n    level2.id = 1;\n    const level3 = new DummyLevel();\n    level3.id = 2;\n    return [level1, level2, level3];\n  }\n\n  class DummyLevel extends Level {\n    constructor() {\n      super();\n    }\n\n  }\n});","map":{"version":3,"sources":["/home/dominik/Desktop/Workspace/FRONTEND/kypo-training-agenda/projects/kypo-training-agenda/internal/src/services/training-run/running/running-training-run-concrete.service.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import { TestBed } from '@angular/core/testing';\nimport { Router } from '@angular/router';\nimport { RouterTestingModule } from '@angular/router/testing';\nimport { asyncData } from '@sentinel/common';\nimport { TrainingRunApi } from '@muni-kypo-crp/training-api';\nimport { AccessTrainingRunInfo, Level } from '@muni-kypo-crp/training-model';\nimport { throwError } from 'rxjs';\nimport {\n  createContext,\n  createDialogSpy,\n  createErrorHandlerSpy,\n  createNavigatorSpy,\n  createRouterSpy,\n  createTrainingRunApiSpy,\n} from '../../../testing/testing-commons.spec';\nimport { TrainingErrorHandler } from '../../../../../src/services/training-error.handler.service';\nimport { TrainingNavigator } from '../../../../../src/services/training-navigator.service';\nimport { TrainingAgendaContext } from '../../context/training-agenda-context.service';\nimport { RunningTrainingRunConcreteService } from './running-training-run-concrete.service';\nimport { MatDialog } from '@angular/material/dialog';\n\ndescribe('RunningTrainingRunConcreteService', () => {\n  let errorHandlerSpy: jasmine.SpyObj<TrainingErrorHandler>;\n  let apiSpy: jasmine.SpyObj<TrainingRunApi>;\n  let service: RunningTrainingRunConcreteService;\n  let navigatorSpy: jasmine.SpyObj<TrainingNavigator>;\n  let routerSpy: jasmine.SpyObj<Router>;\n  let dialogSpy: jasmine.SpyObj<MatDialog>;\n  let context: TrainingAgendaContext;\n\n  beforeEach(() => {\n    errorHandlerSpy = createErrorHandlerSpy();\n    apiSpy = createTrainingRunApiSpy();\n    navigatorSpy = createNavigatorSpy();\n    routerSpy = createRouterSpy();\n    dialogSpy = createDialogSpy();\n    context = createContext();\n\n    TestBed.configureTestingModule({\n      providers: [\n        RunningTrainingRunConcreteService,\n        { provide: TrainingRunApi, useValue: apiSpy },\n        { provide: Router, useValue: routerSpy },\n        { provide: MatDialog, useValue: dialogSpy },\n        { provide: TrainingErrorHandler, useValue: errorHandlerSpy },\n        { provide: TrainingNavigator, useValue: navigatorSpy },\n        { provide: TrainingAgendaContext, useValue: context },\n      ],\n      imports: [RouterTestingModule],\n    });\n    service = TestBed.inject(RunningTrainingRunConcreteService);\n  });\n\n  it('should be created', () => {\n    expect(service).toBeTruthy();\n  });\n\n  it('should initialze service', () => {\n    const accessInfo = createAccessTrainingRunInfoMock();\n    service.init(accessInfo);\n    expect(service.getLevels()).toEqual(createLevelsMock());\n    expect(service.getStartTime()).toEqual(accessInfo.startTime);\n    expect(service.getActiveLevel()).toEqual(accessInfo.currentLevel as Level);\n    expect(service.getActiveLevelPosition()).toEqual(1);\n    expect(service.getIsStepperDisplayed()).toBeTrue();\n  });\n\n  it('should move to next level', (done) => {\n    const accessInfo = createAccessTrainingRunInfoMock();\n    const nextLevel = createLevelsMock()[2];\n    apiSpy.nextLevel.and.returnValue(asyncData(nextLevel));\n    service.init(accessInfo);\n    service.next().subscribe(\n      (res) => {\n        expect(res).toBeTruthy();\n        expect(res).toEqual(nextLevel);\n        expect(apiSpy.nextLevel).toHaveBeenCalledTimes(1);\n        expect(service.getActiveLevel()).toEqual(nextLevel);\n        done();\n      },\n      () => fail\n    );\n  });\n\n  it('should emit error when move to next level fails', (done) => {\n    const accessInfo = createAccessTrainingRunInfoMock();\n    apiSpy.nextLevel.and.returnValue(throwError(null));\n    service.init(accessInfo);\n    service.next().subscribe(\n      () => fail,\n      (err) => {\n        expect(errorHandlerSpy.emit).toHaveBeenCalledTimes(1);\n        expect(errorHandlerSpy.emit).toHaveBeenCalledWith(err, jasmine.anything());\n        done();\n      }\n    );\n  });\n\n  it('should throw error when finish when next is called on last level and fails', (done) => {\n    const accessInfo = createAccessTrainingRunInfoMock();\n    apiSpy.finish.and.returnValue(throwError(null));\n    accessInfo.currentLevel = createLevelsMock()[2];\n    service.init(accessInfo);\n    service.next().subscribe(\n      () => fail,\n      (err) => {\n        expect(errorHandlerSpy.emit).toHaveBeenCalledTimes(1);\n        expect(errorHandlerSpy.emit).toHaveBeenCalledWith(err, jasmine.anything());\n        done();\n      }\n    );\n  });\n\n  it('should clear current TR attributes', () => {\n    const accessInfo = createAccessTrainingRunInfoMock();\n    service.init(accessInfo);\n    service.clear();\n    expect(service.trainingRunId).toBeFalsy();\n    expect(service.sandboxInstanceId).toBeFalsy();\n    expect(service.getStartTime()).toBeFalsy();\n    expect(service.getLevels().length).toEqual(0);\n    service.activeLevel$.subscribe((res) => expect(res).toBeFalsy());\n  });\n\n  function createAccessTrainingRunInfoMock() {\n    const accessInfo = new AccessTrainingRunInfo();\n    accessInfo.trainingRunId = 2;\n    accessInfo.sandboxInstanceId = 4;\n    accessInfo.levels = createLevelsMock();\n    accessInfo.startTime = new Date();\n    accessInfo.currentLevel = createLevelsMock()[1];\n    accessInfo.isStepperDisplayed = true;\n    return accessInfo;\n  }\n\n  function createLevelsMock() {\n    const level1 = new DummyLevel();\n    level1.id = 0;\n    const level2 = new DummyLevel();\n    level2.id = 1;\n    const level3 = new DummyLevel();\n    level3.id = 2;\n    return [level1, level2, level3];\n  }\n\n  class DummyLevel extends Level {\n    constructor() {\n      super();\n    }\n  }\n});\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}