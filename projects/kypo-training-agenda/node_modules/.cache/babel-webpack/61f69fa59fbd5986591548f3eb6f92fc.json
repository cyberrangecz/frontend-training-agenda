{"ast":null,"code":"import { TestBed } from '@angular/core/testing';\nimport { Router } from '@angular/router';\nimport { asyncData } from '@sentinel/common';\nimport { TrainingDefinitionApi } from '@muni-kypo-crp/training-api';\nimport { TrainingDefinition, TrainingDefinitionStateEnum } from '@muni-kypo-crp/training-model';\nimport { throwError } from 'rxjs';\nimport { TrainingDefinitionChangeEvent } from '../../../model/events/training-definition-change-event';\nimport { createContext, createErrorHandlerSpy, createNavigatorSpy, createNotificationSpy, createRouterSpy, createTrainingDefinitionApiSpy } from '../../../../../internal/src/testing/testing-commons.spec';\nimport { TrainingErrorHandler } from '../../../../../src/services/training-error.handler.service';\nimport { TrainingNavigator } from '../../../../../src/services/training-navigator.service';\nimport { TrainingNotificationService } from '../../../../../src/services/training-notification.service';\nimport { TrainingAgendaContext } from '../../../../../internal/src/services/context/training-agenda-context.service';\nimport { TrainingDefinitionEditConcreteService } from './training-definition-edit-concrete.service';\ndescribe('TrainingDefinitionEditConcreteService', () => {\n  let errorHandlerSpy;\n  let notificationSpy;\n  let apiSpy;\n  let service;\n  let context;\n  let navigatorSpy;\n  let routerSpy;\n  beforeEach(() => {\n    errorHandlerSpy = createErrorHandlerSpy();\n    notificationSpy = createNotificationSpy();\n    apiSpy = createTrainingDefinitionApiSpy();\n    navigatorSpy = createNavigatorSpy();\n    routerSpy = createRouterSpy();\n    context = createContext();\n    TestBed.configureTestingModule({\n      providers: [TrainingDefinitionEditConcreteService, {\n        provide: Router,\n        useValue: routerSpy\n      }, {\n        provide: TrainingNavigator,\n        useValue: navigatorSpy\n      }, {\n        provide: TrainingNotificationService,\n        useValue: notificationSpy\n      }, {\n        provide: TrainingDefinitionApi,\n        useValue: apiSpy\n      }, {\n        provide: TrainingErrorHandler,\n        useValue: errorHandlerSpy\n      }, {\n        provide: TrainingAgendaContext,\n        useValue: context\n      }]\n    });\n    service = TestBed.inject(TrainingDefinitionEditConcreteService);\n  });\n  it('should be created', () => {\n    expect(service).toBeTruthy();\n  });\n  it('should set training definition as currently edited', () => {\n    service.set(createMock());\n    service.trainingDefinition$.subscribe(td => {\n      expect(td).toEqual(createMock());\n    });\n    service.editMode$.subscribe(isEdit => {\n      expect(isEdit).toBeTruthy();\n    });\n  });\n  it('should create new training definition if set is not called with one', () => {\n    service.set(null);\n    service.trainingDefinition$.subscribe(td => {\n      expect(td).toEqual(new TrainingDefinition());\n    });\n  });\n  it('should save existing training definition', done => {\n    apiSpy.update.and.returnValue(asyncData(0));\n    service.set(createMock());\n    service.save().subscribe(res => {\n      expect(apiSpy.update).toHaveBeenCalledTimes(1);\n      expect(notificationSpy.emit).toHaveBeenCalledTimes(1);\n      expect(notificationSpy.emit).toHaveBeenCalledWith('success', jasmine.anything());\n      expect(res).toEqual(0);\n      done();\n    }, () => fail);\n  });\n  it('should save new training definition', done => {\n    apiSpy.create.and.returnValue(asyncData(createMock()));\n    routerSpy.navigate.and.returnValue(asyncData(true).toPromise());\n    service.save().subscribe(() => {\n      expect(apiSpy.create).toHaveBeenCalledTimes(1);\n      expect(routerSpy.navigate).toHaveBeenCalledTimes(1);\n      expect(navigatorSpy.toTrainingDefinitionOverview).toHaveBeenCalledTimes(1);\n      expect(notificationSpy.emit).toHaveBeenCalledWith('success', jasmine.anything());\n      done();\n    }, () => fail);\n  });\n  it('should emit error when save existing training definition fails', done => {\n    apiSpy.update.and.returnValue(throwError(null));\n    service.set(createMock());\n    service.save().subscribe(() => fail, err => {\n      expect(errorHandlerSpy.emit).toHaveBeenCalledTimes(1);\n      expect(errorHandlerSpy.emit).toHaveBeenCalledWith(err, jasmine.anything());\n      done();\n    });\n  });\n  it('should emit error when save new training definition fails', done => {\n    apiSpy.create.and.returnValue(throwError(null));\n    routerSpy.navigate.and.returnValue(asyncData(true).toPromise());\n    service.save().subscribe(() => fail, err => {\n      expect(errorHandlerSpy.emit).toHaveBeenCalledTimes(1);\n      expect(errorHandlerSpy.emit).toHaveBeenCalledWith(err, jasmine.anything());\n      done();\n    });\n  });\n  it('should create training definition and stay on edit page', done => {\n    apiSpy.create.and.returnValue(asyncData(createMock()));\n    routerSpy.navigate.and.returnValue(asyncData(true).toPromise());\n    service.createAndStay().subscribe(() => {\n      expect(apiSpy.create).toHaveBeenCalledTimes(1);\n      expect(routerSpy.navigate).toHaveBeenCalledTimes(1);\n      expect(navigatorSpy.toTrainingDefinitionEdit).toHaveBeenCalledTimes(1);\n      expect(notificationSpy.emit).toHaveBeenCalledWith('success', jasmine.anything());\n      done();\n    }, () => fail);\n  });\n  it('should emit error when create training definition and stay on edit page fails', done => {\n    apiSpy.create.and.returnValue(throwError(null));\n    routerSpy.navigate.and.returnValue(asyncData(true).toPromise());\n    service.createAndStay().subscribe(() => fail, err => {\n      expect(errorHandlerSpy.emit).toHaveBeenCalledTimes(1);\n      expect(errorHandlerSpy.emit).toHaveBeenCalledWith(err, jasmine.anything());\n      done();\n    });\n  });\n  it('should update and save snapshot of edited training definition', () => {\n    service.change(new TrainingDefinitionChangeEvent(createMock(), false));\n    service.saveDisabled$.subscribe(idDisabled => expect(idDisabled).toBeTruthy());\n  });\n\n  function createMock() {\n    const def1 = new TrainingDefinition();\n    def1.id = 0;\n    def1.title = 'Def1';\n    def1.state = TrainingDefinitionStateEnum.Released;\n    return def1;\n  }\n});","map":{"version":3,"sources":["/home/dominik/Desktop/Workspace/FRONTEND/kypo-training-agenda/projects/kypo-training-agenda/definition-edit/src/services/state/edit/training-definition-edit-concrete.service.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import { TestBed } from '@angular/core/testing';\nimport { Router } from '@angular/router';\nimport { asyncData } from '@sentinel/common';\nimport { TrainingDefinitionApi } from '@muni-kypo-crp/training-api';\nimport { TrainingDefinition, TrainingDefinitionStateEnum } from '@muni-kypo-crp/training-model';\nimport { throwError } from 'rxjs';\nimport { TrainingDefinitionChangeEvent } from '../../../model/events/training-definition-change-event';\nimport {\n  createContext,\n  createErrorHandlerSpy,\n  createNavigatorSpy,\n  createNotificationSpy,\n  createRouterSpy,\n  createTrainingDefinitionApiSpy,\n} from '../../../../../internal/src/testing/testing-commons.spec';\nimport { TrainingErrorHandler } from '../../../../../src/services/training-error.handler.service';\nimport { TrainingNavigator } from '../../../../../src/services/training-navigator.service';\nimport { TrainingNotificationService } from '../../../../../src/services/training-notification.service';\nimport { TrainingAgendaContext } from '../../../../../internal/src/services/context/training-agenda-context.service';\nimport { TrainingDefinitionEditConcreteService } from './training-definition-edit-concrete.service';\n\ndescribe('TrainingDefinitionEditConcreteService', () => {\n  let errorHandlerSpy: jasmine.SpyObj<TrainingErrorHandler>;\n  let notificationSpy: jasmine.SpyObj<TrainingNotificationService>;\n  let apiSpy: jasmine.SpyObj<TrainingDefinitionApi>;\n  let service: TrainingDefinitionEditConcreteService;\n  let context: TrainingAgendaContext;\n  let navigatorSpy: jasmine.SpyObj<TrainingNavigator>;\n  let routerSpy: jasmine.SpyObj<Router>;\n\n  beforeEach(() => {\n    errorHandlerSpy = createErrorHandlerSpy();\n    notificationSpy = createNotificationSpy();\n    apiSpy = createTrainingDefinitionApiSpy();\n    navigatorSpy = createNavigatorSpy();\n    routerSpy = createRouterSpy();\n    context = createContext();\n\n    TestBed.configureTestingModule({\n      providers: [\n        TrainingDefinitionEditConcreteService,\n        { provide: Router, useValue: routerSpy },\n        { provide: TrainingNavigator, useValue: navigatorSpy },\n        { provide: TrainingNotificationService, useValue: notificationSpy },\n        { provide: TrainingDefinitionApi, useValue: apiSpy },\n        { provide: TrainingErrorHandler, useValue: errorHandlerSpy },\n        { provide: TrainingAgendaContext, useValue: context },\n      ],\n    });\n    service = TestBed.inject(TrainingDefinitionEditConcreteService);\n  });\n\n  it('should be created', () => {\n    expect(service).toBeTruthy();\n  });\n\n  it('should set training definition as currently edited', () => {\n    service.set(createMock());\n    service.trainingDefinition$.subscribe((td) => {\n      expect(td).toEqual(createMock());\n    });\n    service.editMode$.subscribe((isEdit) => {\n      expect(isEdit).toBeTruthy();\n    });\n  });\n\n  it('should create new training definition if set is not called with one', () => {\n    service.set(null);\n    service.trainingDefinition$.subscribe((td) => {\n      expect(td).toEqual(new TrainingDefinition());\n    });\n  });\n\n  it('should save existing training definition', (done) => {\n    apiSpy.update.and.returnValue(asyncData(0));\n    service.set(createMock());\n    service.save().subscribe(\n      (res) => {\n        expect(apiSpy.update).toHaveBeenCalledTimes(1);\n        expect(notificationSpy.emit).toHaveBeenCalledTimes(1);\n        expect(notificationSpy.emit).toHaveBeenCalledWith('success', jasmine.anything());\n        expect(res).toEqual(0);\n        done();\n      },\n      () => fail\n    );\n  });\n\n  it('should save new training definition', (done) => {\n    apiSpy.create.and.returnValue(asyncData(createMock()));\n    routerSpy.navigate.and.returnValue(asyncData(true).toPromise());\n    service.save().subscribe(\n      () => {\n        expect(apiSpy.create).toHaveBeenCalledTimes(1);\n        expect(routerSpy.navigate).toHaveBeenCalledTimes(1);\n        expect(navigatorSpy.toTrainingDefinitionOverview).toHaveBeenCalledTimes(1);\n        expect(notificationSpy.emit).toHaveBeenCalledWith('success', jasmine.anything());\n        done();\n      },\n      () => fail\n    );\n  });\n\n  it('should emit error when save existing training definition fails', (done) => {\n    apiSpy.update.and.returnValue(throwError(null));\n    service.set(createMock());\n    service.save().subscribe(\n      () => fail,\n      (err) => {\n        expect(errorHandlerSpy.emit).toHaveBeenCalledTimes(1);\n        expect(errorHandlerSpy.emit).toHaveBeenCalledWith(err, jasmine.anything());\n        done();\n      }\n    );\n  });\n\n  it('should emit error when save new training definition fails', (done) => {\n    apiSpy.create.and.returnValue(throwError(null));\n    routerSpy.navigate.and.returnValue(asyncData(true).toPromise());\n    service.save().subscribe(\n      () => fail,\n      (err) => {\n        expect(errorHandlerSpy.emit).toHaveBeenCalledTimes(1);\n        expect(errorHandlerSpy.emit).toHaveBeenCalledWith(err, jasmine.anything());\n        done();\n      }\n    );\n  });\n\n  it('should create training definition and stay on edit page', (done) => {\n    apiSpy.create.and.returnValue(asyncData(createMock()));\n    routerSpy.navigate.and.returnValue(asyncData(true).toPromise());\n    service.createAndStay().subscribe(\n      () => {\n        expect(apiSpy.create).toHaveBeenCalledTimes(1);\n        expect(routerSpy.navigate).toHaveBeenCalledTimes(1);\n        expect(navigatorSpy.toTrainingDefinitionEdit).toHaveBeenCalledTimes(1);\n        expect(notificationSpy.emit).toHaveBeenCalledWith('success', jasmine.anything());\n        done();\n      },\n      () => fail\n    );\n  });\n\n  it('should emit error when create training definition and stay on edit page fails', (done) => {\n    apiSpy.create.and.returnValue(throwError(null));\n    routerSpy.navigate.and.returnValue(asyncData(true).toPromise());\n    service.createAndStay().subscribe(\n      () => fail,\n      (err) => {\n        expect(errorHandlerSpy.emit).toHaveBeenCalledTimes(1);\n        expect(errorHandlerSpy.emit).toHaveBeenCalledWith(err, jasmine.anything());\n        done();\n      }\n    );\n  });\n\n  it('should update and save snapshot of edited training definition', () => {\n    service.change(new TrainingDefinitionChangeEvent(createMock(), false));\n    service.saveDisabled$.subscribe((idDisabled) => expect(idDisabled).toBeTruthy());\n  });\n\n  function createMock(): TrainingDefinition {\n    const def1 = new TrainingDefinition();\n    def1.id = 0;\n    def1.title = 'Def1';\n    def1.state = TrainingDefinitionStateEnum.Released;\n\n    return def1;\n  }\n});\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}