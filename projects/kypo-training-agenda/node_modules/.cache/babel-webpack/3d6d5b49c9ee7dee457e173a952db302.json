{"ast":null,"code":"import { TestBed } from '@angular/core/testing';\nimport { MatDialog, MatDialogModule } from '@angular/material/dialog';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { SentinelDialogResultEnum } from '@sentinel/components/dialogs';\nimport { asyncData } from '@sentinel/common';\nimport { TrainingDefinitionApi } from '@muni-kypo-crp/training-api';\nimport { AbstractLevelTypeEnum, AssessmentLevel, GameLevel, InfoLevel } from '@muni-kypo-crp/training-model';\nimport { of, throwError } from 'rxjs';\nimport { createContext, createDialogSpy, createErrorHandlerSpy, createNotificationSpy, createTrainingDefinitionApiSpy } from '../../../../../internal/src/testing/testing-commons.spec';\nimport { TrainingErrorHandler } from '../../../../../src/services/training-error.handler.service';\nimport { TrainingNotificationService } from '../../../../../src/services/training-notification.service';\nimport { TrainingAgendaContext } from '../../../../../internal/src/services/context/training-agenda-context.service';\nimport { LevelEditConcreteService } from './level-edit-concrete.service';\ndescribe('LevelEditConcreteService', () => {\n  let errorHandlerSpy;\n  let notificationSpy;\n  let apiSpy;\n  let dialogSpy;\n  let service;\n  let context;\n  beforeEach(() => {\n    errorHandlerSpy = createErrorHandlerSpy();\n    notificationSpy = createNotificationSpy();\n    dialogSpy = createDialogSpy();\n    apiSpy = createTrainingDefinitionApiSpy();\n    context = createContext();\n    TestBed.configureTestingModule({\n      providers: [LevelEditConcreteService, {\n        provide: MatDialog,\n        useValue: dialogSpy\n      }, {\n        provide: TrainingNotificationService,\n        useValue: notificationSpy\n      }, {\n        provide: TrainingDefinitionApi,\n        useValue: apiSpy\n      }, {\n        provide: TrainingErrorHandler,\n        useValue: errorHandlerSpy\n      }, {\n        provide: TrainingAgendaContext,\n        useValue: context\n      }],\n      imports: [MatDialogModule, BrowserAnimationsModule]\n    });\n    service = TestBed.inject(LevelEditConcreteService);\n  });\n  it('should be created', () => {\n    expect(service).toBeTruthy();\n  });\n  it('should return correct levels count', () => {\n    service.set(0, createMock());\n    expect(service.getLevelsCount()).toEqual(2);\n  });\n  it('should set active level', done => {\n    service.set(0, createMock());\n    service.setActiveLevel(1);\n    service.activeStep$.subscribe(activeStep => {\n      expect(activeStep).toEqual(1);\n      done();\n    });\n  });\n  it('should emit active level change', () => {\n    service.onActiveLevelChanged(createMock()[0]);\n    service.levels$.subscribe(levels => {\n      expect(levels).toBeTruthy();\n      expect(levels[0].isUnsaved).toBeTruthy();\n    });\n    service.unsavedLevels$.subscribe(levels => {\n      expect(levels).toBeTruthy();\n      expect(levels.length).toEqual(1);\n      expect(levels[0].id).toEqual(createMock()[0].id);\n    });\n  });\n  it('should return current sellected level', () => {\n    service.set(1, createMock());\n    service.setActiveLevel(1);\n    expect(service.getSelected()).toEqual(createMock()[1]);\n  });\n  it('should navigate to last level', () => {\n    service.set(1, createMock());\n    service.navigateToLastLevel();\n    expect(service.getSelected()).toEqual(createMock()[1]);\n  });\n  it('should navigate to previous level', () => {\n    service.set(1, createMock());\n    service.setActiveLevel(1);\n    service.navigateToPreviousLevel();\n    expect(service.getSelected()).toEqual(createMock()[0]);\n  });\n  it('should add new assessment level', done => {\n    const assessmentLevel = new AssessmentLevel();\n    apiSpy.createAssessmentLevel.and.returnValue(asyncData(assessmentLevel));\n    apiSpy.getLevel.and.returnValue(asyncData(assessmentLevel));\n    service.add(AbstractLevelTypeEnum.Assessment).subscribe(res => {\n      expect(apiSpy.createAssessmentLevel).toHaveBeenCalledTimes(1);\n      expect(res).toEqual(assessmentLevel);\n      done();\n    }, () => fail);\n  });\n  it('should add new game level', done => {\n    const gameLevel = new GameLevel();\n    apiSpy.createGameLevel.and.returnValue(asyncData(gameLevel));\n    apiSpy.getLevel.and.returnValue(asyncData(gameLevel));\n    service.add(AbstractLevelTypeEnum.Game).subscribe(res => {\n      expect(apiSpy.createGameLevel).toHaveBeenCalledTimes(1);\n      expect(res).toEqual(gameLevel);\n      done();\n    }, () => fail);\n  });\n  it('should add new info level', done => {\n    const infoLevel = new InfoLevel();\n    apiSpy.createInfoLevel.and.returnValue(asyncData(infoLevel));\n    apiSpy.getLevel.and.returnValue(asyncData(infoLevel));\n    service.add(AbstractLevelTypeEnum.Info).subscribe(res => {\n      expect(apiSpy.createInfoLevel).toHaveBeenCalledTimes(1);\n      expect(res).toEqual(infoLevel);\n      done();\n    }, () => fail);\n  });\n  it('should emit error when add new assessment level fails', done => {\n    const assessmentLevel = new AssessmentLevel();\n    apiSpy.createAssessmentLevel.and.returnValue(throwError(null));\n    apiSpy.getLevel.and.returnValue(asyncData(assessmentLevel));\n    service.add(AbstractLevelTypeEnum.Assessment).subscribe(() => fail, err => {\n      expect(errorHandlerSpy.emit).toHaveBeenCalledTimes(1);\n      expect(errorHandlerSpy.emit).toHaveBeenCalledWith(err, jasmine.anything());\n      done();\n    });\n  });\n  it('should emit error when should add new game level fails', done => {\n    const gameLevel = new GameLevel();\n    apiSpy.createGameLevel.and.returnValue(throwError(null));\n    apiSpy.getLevel.and.returnValue(asyncData(gameLevel));\n    service.add(AbstractLevelTypeEnum.Game).subscribe(() => fail, err => {\n      expect(errorHandlerSpy.emit).toHaveBeenCalledTimes(1);\n      expect(errorHandlerSpy.emit).toHaveBeenCalledWith(err, jasmine.anything());\n      done();\n    });\n  });\n  it('should emit error when should add new info level fails', done => {\n    apiSpy.createInfoLevel.and.returnValue(throwError(null));\n    apiSpy.getLevel.and.returnValue(asyncData(new InfoLevel()));\n    service.add(AbstractLevelTypeEnum.Info).subscribe(() => fail, err => {\n      expect(errorHandlerSpy.emit).toHaveBeenCalledTimes(1);\n      expect(errorHandlerSpy.emit).toHaveBeenCalledWith(err, jasmine.anything());\n      done();\n    });\n  });\n  it('should save changes in level', done => {\n    apiSpy.updateGameLevel.and.returnValue(asyncData(new GameLevel()));\n    service.set(1, createMock());\n    service.setActiveLevel(1);\n    service.saveSelected().subscribe(() => {\n      expect(notificationSpy.emit).toHaveBeenCalledTimes(1);\n      expect(notificationSpy.emit).toHaveBeenCalledWith('success', jasmine.anything());\n      done();\n    }, () => fail);\n  });\n  it('should emit error when level cannot be saved', done => {\n    apiSpy.updateGameLevel.and.returnValue(throwError(null));\n    service.set(1, createMock());\n    service.setActiveLevel(1);\n    service.saveSelected().subscribe(() => fail, err => {\n      expect(errorHandlerSpy.emit).toHaveBeenCalledTimes(1);\n      expect(errorHandlerSpy.emit).toHaveBeenCalledWith(err, jasmine.anything());\n      done();\n    });\n  });\n  it('should delete selected level', done => {\n    apiSpy.deleteLevel.and.returnValue(asyncData(createMock()));\n    const dialogRefSpyObj = jasmine.createSpyObj({\n      afterClosed: of(SentinelDialogResultEnum.CONFIRMED),\n      close: null\n    });\n    dialogSpy.open.and.returnValue(dialogRefSpyObj);\n    service.set(1, createMock());\n    service.setActiveLevel(1);\n    service.deleteSelected().subscribe(() => {\n      expect(apiSpy.deleteLevel).toHaveBeenCalledTimes(1);\n      done();\n    }, () => fail);\n  });\n  it('should emit error when deleting selected level fails', done => {\n    apiSpy.deleteLevel.and.returnValue(throwError(null));\n    const dialogRefSpyObj = jasmine.createSpyObj({\n      afterClosed: of(SentinelDialogResultEnum.CONFIRMED),\n      close: null\n    });\n    dialogSpy.open.and.returnValue(dialogRefSpyObj);\n    service.set(1, createMock());\n    service.setActiveLevel(1);\n    service.deleteSelected().subscribe(() => fail, () => {\n      expect(errorHandlerSpy.emit).toHaveBeenCalledTimes(1);\n      done();\n    });\n  });\n\n  function createMock() {\n    const gameLevel1 = new GameLevel();\n    gameLevel1.id = 0;\n    gameLevel1.title = '1';\n    const gameLevel2 = new GameLevel();\n    gameLevel2.id = 1;\n    gameLevel2.title = '2';\n    return [gameLevel1, gameLevel2];\n  }\n});","map":{"version":3,"sources":["/home/dominik/Desktop/Workspace/FRONTEND/kypo-training-agenda/projects/kypo-training-agenda/definition-edit/src/services/state/level/level-edit-concrete.service.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import { TestBed } from '@angular/core/testing';\nimport { MatDialog, MatDialogModule } from '@angular/material/dialog';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { SentinelDialogResultEnum } from '@sentinel/components/dialogs';\nimport { asyncData } from '@sentinel/common';\nimport { TrainingDefinitionApi } from '@muni-kypo-crp/training-api';\nimport { AbstractLevelTypeEnum, AssessmentLevel, GameLevel, InfoLevel } from '@muni-kypo-crp/training-model';\nimport { of, throwError } from 'rxjs';\n\nimport {\n  createContext,\n  createDialogSpy,\n  createErrorHandlerSpy,\n  createNotificationSpy,\n  createTrainingDefinitionApiSpy,\n} from '../../../../../internal/src/testing/testing-commons.spec';\nimport { TrainingErrorHandler } from '../../../../../src/services/training-error.handler.service';\nimport { TrainingNotificationService } from '../../../../../src/services/training-notification.service';\nimport { TrainingAgendaContext } from '../../../../../internal/src/services/context/training-agenda-context.service';\nimport { LevelEditConcreteService } from './level-edit-concrete.service';\n\ndescribe('LevelEditConcreteService', () => {\n  let errorHandlerSpy: jasmine.SpyObj<TrainingErrorHandler>;\n  let notificationSpy: jasmine.SpyObj<TrainingNotificationService>;\n  let apiSpy: jasmine.SpyObj<TrainingDefinitionApi>;\n  let dialogSpy: jasmine.SpyObj<MatDialog>;\n  let service: LevelEditConcreteService;\n  let context: TrainingAgendaContext;\n\n  beforeEach(() => {\n    errorHandlerSpy = createErrorHandlerSpy();\n    notificationSpy = createNotificationSpy();\n    dialogSpy = createDialogSpy();\n    apiSpy = createTrainingDefinitionApiSpy();\n    context = createContext();\n\n    TestBed.configureTestingModule({\n      providers: [\n        LevelEditConcreteService,\n        { provide: MatDialog, useValue: dialogSpy },\n        { provide: TrainingNotificationService, useValue: notificationSpy },\n        { provide: TrainingDefinitionApi, useValue: apiSpy },\n        { provide: TrainingErrorHandler, useValue: errorHandlerSpy },\n        { provide: TrainingAgendaContext, useValue: context },\n      ],\n      imports: [MatDialogModule, BrowserAnimationsModule],\n    });\n    service = TestBed.inject(LevelEditConcreteService);\n  });\n\n  it('should be created', () => {\n    expect(service).toBeTruthy();\n  });\n\n  it('should return correct levels count', () => {\n    service.set(0, createMock());\n    expect(service.getLevelsCount()).toEqual(2);\n  });\n\n  it('should set active level', (done) => {\n    service.set(0, createMock());\n    service.setActiveLevel(1);\n    service.activeStep$.subscribe((activeStep) => {\n      expect(activeStep).toEqual(1);\n      done();\n    });\n  });\n\n  it('should emit active level change', () => {\n    service.onActiveLevelChanged(createMock()[0]);\n    service.levels$.subscribe((levels) => {\n      expect(levels).toBeTruthy();\n      expect(levels[0].isUnsaved).toBeTruthy();\n    });\n    service.unsavedLevels$.subscribe((levels) => {\n      expect(levels).toBeTruthy();\n      expect(levels.length).toEqual(1);\n      expect(levels[0].id).toEqual(createMock()[0].id);\n    });\n  });\n\n  it('should return current sellected level', () => {\n    service.set(1, createMock());\n    service.setActiveLevel(1);\n    expect(service.getSelected()).toEqual(createMock()[1]);\n  });\n\n  it('should navigate to last level', () => {\n    service.set(1, createMock());\n    service.navigateToLastLevel();\n    expect(service.getSelected()).toEqual(createMock()[1]);\n  });\n\n  it('should navigate to previous level', () => {\n    service.set(1, createMock());\n    service.setActiveLevel(1);\n    service.navigateToPreviousLevel();\n    expect(service.getSelected()).toEqual(createMock()[0]);\n  });\n\n  it('should add new assessment level', (done) => {\n    const assessmentLevel = new AssessmentLevel();\n    apiSpy.createAssessmentLevel.and.returnValue(asyncData(assessmentLevel));\n    apiSpy.getLevel.and.returnValue(asyncData(assessmentLevel));\n    service.add(AbstractLevelTypeEnum.Assessment).subscribe(\n      (res) => {\n        expect(apiSpy.createAssessmentLevel).toHaveBeenCalledTimes(1);\n        expect(res).toEqual(assessmentLevel);\n        done();\n      },\n      () => fail\n    );\n  });\n\n  it('should add new game level', (done) => {\n    const gameLevel = new GameLevel();\n    apiSpy.createGameLevel.and.returnValue(asyncData(gameLevel));\n    apiSpy.getLevel.and.returnValue(asyncData(gameLevel));\n    service.add(AbstractLevelTypeEnum.Game).subscribe(\n      (res) => {\n        expect(apiSpy.createGameLevel).toHaveBeenCalledTimes(1);\n        expect(res).toEqual(gameLevel);\n        done();\n      },\n      () => fail\n    );\n  });\n\n  it('should add new info level', (done) => {\n    const infoLevel = new InfoLevel();\n    apiSpy.createInfoLevel.and.returnValue(asyncData(infoLevel));\n    apiSpy.getLevel.and.returnValue(asyncData(infoLevel));\n    service.add(AbstractLevelTypeEnum.Info).subscribe(\n      (res) => {\n        expect(apiSpy.createInfoLevel).toHaveBeenCalledTimes(1);\n        expect(res).toEqual(infoLevel);\n        done();\n      },\n      () => fail\n    );\n  });\n\n  it('should emit error when add new assessment level fails', (done) => {\n    const assessmentLevel = new AssessmentLevel();\n    apiSpy.createAssessmentLevel.and.returnValue(throwError(null));\n    apiSpy.getLevel.and.returnValue(asyncData(assessmentLevel));\n    service.add(AbstractLevelTypeEnum.Assessment).subscribe(\n      () => fail,\n      (err) => {\n        expect(errorHandlerSpy.emit).toHaveBeenCalledTimes(1);\n        expect(errorHandlerSpy.emit).toHaveBeenCalledWith(err, jasmine.anything());\n        done();\n      }\n    );\n  });\n\n  it('should emit error when should add new game level fails', (done) => {\n    const gameLevel = new GameLevel();\n    apiSpy.createGameLevel.and.returnValue(throwError(null));\n    apiSpy.getLevel.and.returnValue(asyncData(gameLevel));\n    service.add(AbstractLevelTypeEnum.Game).subscribe(\n      () => fail,\n      (err) => {\n        expect(errorHandlerSpy.emit).toHaveBeenCalledTimes(1);\n        expect(errorHandlerSpy.emit).toHaveBeenCalledWith(err, jasmine.anything());\n        done();\n      }\n    );\n  });\n\n  it('should emit error when should add new info level fails', (done) => {\n    apiSpy.createInfoLevel.and.returnValue(throwError(null));\n    apiSpy.getLevel.and.returnValue(asyncData(new InfoLevel()));\n    service.add(AbstractLevelTypeEnum.Info).subscribe(\n      () => fail,\n      (err) => {\n        expect(errorHandlerSpy.emit).toHaveBeenCalledTimes(1);\n        expect(errorHandlerSpy.emit).toHaveBeenCalledWith(err, jasmine.anything());\n        done();\n      }\n    );\n  });\n\n  it('should save changes in level', (done) => {\n    apiSpy.updateGameLevel.and.returnValue(asyncData(new GameLevel()));\n    service.set(1, createMock());\n    service.setActiveLevel(1);\n    service.saveSelected().subscribe(\n      () => {\n        expect(notificationSpy.emit).toHaveBeenCalledTimes(1);\n        expect(notificationSpy.emit).toHaveBeenCalledWith('success', jasmine.anything());\n        done();\n      },\n      () => fail\n    );\n  });\n\n  it('should emit error when level cannot be saved', (done) => {\n    apiSpy.updateGameLevel.and.returnValue(throwError(null));\n    service.set(1, createMock());\n    service.setActiveLevel(1);\n    service.saveSelected().subscribe(\n      () => fail,\n      (err) => {\n        expect(errorHandlerSpy.emit).toHaveBeenCalledTimes(1);\n        expect(errorHandlerSpy.emit).toHaveBeenCalledWith(err, jasmine.anything());\n        done();\n      }\n    );\n  });\n\n  it('should delete selected level', (done) => {\n    apiSpy.deleteLevel.and.returnValue(asyncData(createMock()));\n    const dialogRefSpyObj = jasmine.createSpyObj({ afterClosed: of(SentinelDialogResultEnum.CONFIRMED), close: null });\n    dialogSpy.open.and.returnValue(dialogRefSpyObj);\n    service.set(1, createMock());\n    service.setActiveLevel(1);\n    service.deleteSelected().subscribe(\n      () => {\n        expect(apiSpy.deleteLevel).toHaveBeenCalledTimes(1);\n        done();\n      },\n      () => fail\n    );\n  });\n\n  it('should emit error when deleting selected level fails', (done) => {\n    apiSpy.deleteLevel.and.returnValue(throwError(null));\n    const dialogRefSpyObj = jasmine.createSpyObj({ afterClosed: of(SentinelDialogResultEnum.CONFIRMED), close: null });\n    dialogSpy.open.and.returnValue(dialogRefSpyObj);\n    service.set(1, createMock());\n    service.setActiveLevel(1);\n    service.deleteSelected().subscribe(\n      () => fail,\n      () => {\n        expect(errorHandlerSpy.emit).toHaveBeenCalledTimes(1);\n        done();\n      }\n    );\n  });\n\n  function createMock() {\n    const gameLevel1 = new GameLevel();\n    gameLevel1.id = 0;\n    gameLevel1.title = '1';\n    const gameLevel2 = new GameLevel();\n    gameLevel2.id = 1;\n    gameLevel2.title = '2';\n    return [gameLevel1, gameLevel2];\n  }\n});\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}