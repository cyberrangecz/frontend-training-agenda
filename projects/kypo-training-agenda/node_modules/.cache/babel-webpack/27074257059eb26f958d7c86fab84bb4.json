{"ast":null,"code":"import { TestBed } from '@angular/core/testing';\nimport { MatDialog, MatDialogModule } from '@angular/material/dialog';\nimport { RouterTestingModule } from '@angular/router/testing';\nimport { SentinelDialogResultEnum } from '@sentinel/components/dialogs';\nimport { asyncData, SentinelFilter, PaginatedResource, SentinelPagination, RequestedPagination } from '@sentinel/common';\nimport { TrainingDefinitionApi } from '@muni-kypo-crp/training-api';\nimport { TrainingDefinition, TrainingDefinitionStateEnum } from '@muni-kypo-crp/training-model';\nimport { of, throwError } from 'rxjs';\nimport { createContext, createDialogSpy, createErrorHandlerSpy, createNavigatorSpy, createNotificationSpy, createTrainingDefinitionApiSpy } from '../../../../internal/src/testing/testing-commons.spec';\nimport { TrainingErrorHandler } from '@muni-kypo-crp/training-agenda';\nimport { TrainingNavigator } from '@muni-kypo-crp/training-agenda';\nimport { TrainingNotificationService } from '@muni-kypo-crp/training-agenda';\nimport { TrainingAgendaContext } from '@muni-kypo-crp/training-agenda/internal';\nimport { FileUploadProgressService } from '../file-upload/file-upload-progress.service';\nimport { TrainingDefinitionConcreteService } from './training-definition.concrete.service';\ndescribe('TrainingDefinitionConcreteService', () => {\n  let errorHandlerSpy;\n  let notificationSpy;\n  let apiSpy;\n  let dialogSpy;\n  let service;\n  let context;\n  let navigatorSpy;\n  beforeEach(() => {\n    errorHandlerSpy = createErrorHandlerSpy();\n    notificationSpy = createNotificationSpy();\n    apiSpy = createTrainingDefinitionApiSpy();\n    dialogSpy = createDialogSpy();\n    navigatorSpy = createNavigatorSpy();\n    context = createContext();\n    TestBed.configureTestingModule({\n      providers: [TrainingDefinitionConcreteService, FileUploadProgressService, {\n        provide: MatDialog,\n        useValue: dialogSpy\n      }, {\n        provide: TrainingNavigator,\n        useValue: navigatorSpy\n      }, {\n        provide: TrainingNotificationService,\n        useValue: notificationSpy\n      }, {\n        provide: TrainingDefinitionApi,\n        useValue: apiSpy\n      }, {\n        provide: TrainingErrorHandler,\n        useValue: errorHandlerSpy\n      }, {\n        provide: TrainingAgendaContext,\n        useValue: context\n      }],\n      imports: [MatDialogModule, RouterTestingModule.withRoutes([{\n        path: 'create',\n        redirectTo: ''\n      }, {\n        path: 'edit',\n        redirectTo: ''\n      }, {\n        path: 'preview',\n        redirectTo: ''\n      }])]\n    });\n    service = TestBed.inject(TrainingDefinitionConcreteService);\n  });\n  it('should be created', () => {\n    expect(service).toBeTruthy();\n  });\n  it('should get all training definitions', done => {\n    apiSpy.getAll.and.returnValue(asyncData(createPaginatedMock()));\n    service.getAll(createPagination(), 'filter').subscribe(res => {\n      expect(res).toBeTruthy();\n      expect(res).toEqual(createPaginatedMock());\n      done();\n    }, () => fail);\n    expect(apiSpy.getAll).toHaveBeenCalledTimes(1);\n    expect(apiSpy.getAll).toHaveBeenCalledWith(createPagination(), [new SentinelFilter('title', 'filter')]);\n  });\n  it('should emit error when get all training definitions fails', done => {\n    apiSpy.getAll.and.returnValue(throwError(null));\n    service.getAll(createPagination(), 'filter').subscribe(() => fail, () => {\n      expect(errorHandlerSpy.emit).toHaveBeenCalledTimes(1);\n      done();\n    });\n    expect(apiSpy.getAll).toHaveBeenCalledTimes(1);\n    expect(apiSpy.getAll).toHaveBeenCalledWith(createPagination(), [new SentinelFilter('title', 'filter')]);\n  });\n  it('should redirects to training definition creation page', done => {\n    navigatorSpy.toNewTrainingDefinition.and.returnValue('create');\n    service.create().subscribe(() => done(), () => fail);\n    expect(navigatorSpy.toNewTrainingDefinition).toHaveBeenCalledTimes(1);\n  });\n  it('should redirects to training definition edit page', done => {\n    navigatorSpy.toTrainingDefinitionEdit.and.returnValue('edit');\n    service.edit(new TrainingDefinition()).subscribe(() => done(), () => fail);\n    expect(navigatorSpy.toTrainingDefinitionEdit).toHaveBeenCalledTimes(1);\n  });\n  it('should redirects to training definition preview page', done => {\n    navigatorSpy.toTrainingDefinitionPreview.and.returnValue('preview');\n    service.preview(new TrainingDefinition()).subscribe(() => done(), () => fail);\n    expect(navigatorSpy.toTrainingDefinitionPreview).toHaveBeenCalledTimes(1);\n  });\n  it('should delete level', done => {\n    apiSpy.delete.and.returnValue(asyncData(null));\n    apiSpy.getAll.and.returnValue(asyncData(createPaginatedMock()));\n    const dialogRefSpyObj = jasmine.createSpyObj({\n      afterClosed: of(SentinelDialogResultEnum.CONFIRMED),\n      close: null\n    });\n    dialogSpy.open.and.returnValue(dialogRefSpyObj);\n    service.delete(createMock()[1]).subscribe(res => {\n      expect(apiSpy.delete).toHaveBeenCalledTimes(1);\n      expect(notificationSpy.emit).toHaveBeenCalledTimes(1);\n      expect(notificationSpy.emit).toHaveBeenCalledWith('success', jasmine.anything());\n      expect(res).toEqual(createPaginatedMock());\n      done();\n    }, () => fail);\n  });\n  it('should emit error when delete level fails', done => {\n    apiSpy.delete.and.returnValue(throwError(null));\n    apiSpy.getAll.and.returnValue(asyncData(createPaginatedMock()));\n    const dialogRefSpyObj = jasmine.createSpyObj({\n      afterClosed: of(SentinelDialogResultEnum.CONFIRMED),\n      close: null\n    });\n    dialogSpy.open.and.returnValue(dialogRefSpyObj);\n    service.delete(createMock()[1]).subscribe(() => fail, err => {\n      expect(apiSpy.delete).toHaveBeenCalledTimes(1);\n      expect(errorHandlerSpy.emit).toHaveBeenCalledTimes(1);\n      expect(errorHandlerSpy.emit).toHaveBeenCalledWith(err, jasmine.anything());\n      done();\n    });\n  });\n  it('should clone training definition', done => {\n    apiSpy.clone.and.returnValue(asyncData(1));\n    apiSpy.getAll.and.returnValue(asyncData(createPaginatedMock()));\n    const trainingDefinition = createMock()[1];\n    const dialogRefSpyObj = jasmine.createSpyObj({\n      afterClosed: of(trainingDefinition),\n      close: null\n    });\n    dialogSpy.open.and.returnValue(dialogRefSpyObj);\n    service.clone(createMock()[1]).subscribe(res => {\n      expect(apiSpy.clone).toHaveBeenCalledTimes(1);\n      expect(notificationSpy.emit).toHaveBeenCalledTimes(1);\n      expect(notificationSpy.emit).toHaveBeenCalledWith('success', jasmine.anything());\n      expect(res).toEqual(createPaginatedMock());\n      done();\n    }, () => fail);\n  });\n  it('should emit error when clone training definition fails', done => {\n    apiSpy.clone.and.returnValue(throwError(null));\n    apiSpy.getAll.and.returnValue(asyncData(createPaginatedMock()));\n    const trainingDefinition = createMock()[1];\n    const dialogRefSpyObj = jasmine.createSpyObj({\n      afterClosed: of(trainingDefinition),\n      close: null\n    });\n    dialogSpy.open.and.returnValue(dialogRefSpyObj);\n    service.clone(trainingDefinition).subscribe(() => fail, err => {\n      expect(apiSpy.clone).toHaveBeenCalledTimes(1);\n      expect(errorHandlerSpy.emit).toHaveBeenCalledTimes(1);\n      expect(errorHandlerSpy.emit).toHaveBeenCalledWith(err, jasmine.anything());\n      done();\n    });\n  });\n  it('should emit error when download training definition fails', done => {\n    apiSpy.download.and.returnValue(throwError(null));\n    const trainingDefinition = createMock()[1];\n    service.download(trainingDefinition).subscribe(() => fail, err => {\n      expect(apiSpy.download).toHaveBeenCalledTimes(1);\n      expect(errorHandlerSpy.emit).toHaveBeenCalledTimes(1);\n      expect(errorHandlerSpy.emit).toHaveBeenCalledWith(err, jasmine.anything());\n      done();\n    });\n  });\n  it('should change state of training definition', done => {\n    apiSpy.changeState.and.returnValue(asyncData(1));\n    const trainingDefinition = createMock()[1];\n    const dialogRefSpyObj = jasmine.createSpyObj({\n      afterClosed: of(SentinelDialogResultEnum.CONFIRMED),\n      close: null\n    });\n    dialogSpy.open.and.returnValue(dialogRefSpyObj);\n    service.changeState(trainingDefinition, TrainingDefinitionStateEnum.Archived).subscribe(res => {\n      expect(apiSpy.changeState).toHaveBeenCalledTimes(1);\n      expect(apiSpy.changeState).toHaveBeenCalledWith(1, TrainingDefinitionStateEnum.Archived);\n      expect(res).toEqual(1);\n      done();\n    }, () => fail);\n  });\n  it('should emit error when change state of training definition fails', done => {\n    apiSpy.changeState.and.returnValue(throwError(null));\n    const trainingDefinition = createMock()[1];\n    const dialogRefSpyObj = jasmine.createSpyObj({\n      afterClosed: of(SentinelDialogResultEnum.CONFIRMED),\n      close: null\n    });\n    dialogSpy.open.and.returnValue(dialogRefSpyObj);\n    service.changeState(trainingDefinition, TrainingDefinitionStateEnum.Archived).subscribe(() => fail, err => {\n      expect(errorHandlerSpy.emit).toHaveBeenCalledTimes(1);\n      expect(errorHandlerSpy.emit).toHaveBeenCalledWith(err, jasmine.anything());\n      done();\n    });\n  });\n\n  function createMock() {\n    const def1 = new TrainingDefinition();\n    def1.id = 0;\n    def1.title = 'Def1';\n    def1.state = TrainingDefinitionStateEnum.Released;\n    const def2 = new TrainingDefinition();\n    def2.id = 1;\n    def2.title = 'Def2';\n    def2.state = TrainingDefinitionStateEnum.Released;\n    const def3 = new TrainingDefinition();\n    def3.id = 2;\n    def3.title = 'Def3';\n    def3.state = TrainingDefinitionStateEnum.Released;\n    return [def1, def2, def3];\n  }\n\n  function createPaginatedMock() {\n    return new PaginatedResource(createMock(), new SentinelPagination(1, 3, 3, 3, 1));\n  }\n\n  function createPagination() {\n    return new RequestedPagination(1, 3, '', '');\n  }\n});","map":{"version":3,"sources":["/home/dominik/Desktop/Workspace/FRONTEND/kypo-training-agenda/projects/kypo-training-agenda/definition-overview/src/services/state/training-definition-concrete.service.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import { TestBed } from '@angular/core/testing';\nimport { MatDialog, MatDialogModule } from '@angular/material/dialog';\nimport { RouterTestingModule } from '@angular/router/testing';\nimport { SentinelDialogResultEnum } from '@sentinel/components/dialogs';\nimport {\n  asyncData,\n  SentinelFilter,\n  PaginatedResource,\n  SentinelPagination,\n  RequestedPagination,\n} from '@sentinel/common';\nimport { TrainingDefinitionApi } from '@muni-kypo-crp/training-api';\nimport { TrainingDefinition, TrainingDefinitionStateEnum } from '@muni-kypo-crp/training-model';\nimport { of, throwError } from 'rxjs';\nimport {\n  createContext,\n  createDialogSpy,\n  createErrorHandlerSpy,\n  createNavigatorSpy,\n  createNotificationSpy,\n  createTrainingDefinitionApiSpy,\n} from '../../../../internal/src/testing/testing-commons.spec';\nimport { TrainingErrorHandler } from '@muni-kypo-crp/training-agenda';\nimport { TrainingNavigator } from '@muni-kypo-crp/training-agenda';\nimport { TrainingNotificationService } from '@muni-kypo-crp/training-agenda';\nimport { TrainingAgendaContext } from '@muni-kypo-crp/training-agenda/internal';\nimport { FileUploadProgressService } from '../file-upload/file-upload-progress.service';\nimport { TrainingDefinitionConcreteService } from './training-definition.concrete.service';\n\ndescribe('TrainingDefinitionConcreteService', () => {\n  let errorHandlerSpy: jasmine.SpyObj<TrainingErrorHandler>;\n  let notificationSpy: jasmine.SpyObj<TrainingNotificationService>;\n  let apiSpy: jasmine.SpyObj<TrainingDefinitionApi>;\n  let dialogSpy: jasmine.SpyObj<MatDialog>;\n  let service: TrainingDefinitionConcreteService;\n  let context: TrainingAgendaContext;\n  let navigatorSpy: jasmine.SpyObj<TrainingNavigator>;\n\n  beforeEach(() => {\n    errorHandlerSpy = createErrorHandlerSpy();\n    notificationSpy = createNotificationSpy();\n    apiSpy = createTrainingDefinitionApiSpy();\n    dialogSpy = createDialogSpy();\n    navigatorSpy = createNavigatorSpy();\n    context = createContext();\n\n    TestBed.configureTestingModule({\n      providers: [\n        TrainingDefinitionConcreteService,\n        FileUploadProgressService,\n        { provide: MatDialog, useValue: dialogSpy },\n        { provide: TrainingNavigator, useValue: navigatorSpy },\n        { provide: TrainingNotificationService, useValue: notificationSpy },\n        { provide: TrainingDefinitionApi, useValue: apiSpy },\n        { provide: TrainingErrorHandler, useValue: errorHandlerSpy },\n        { provide: TrainingAgendaContext, useValue: context },\n      ],\n      imports: [\n        MatDialogModule,\n        RouterTestingModule.withRoutes([\n          { path: 'create', redirectTo: '' },\n          { path: 'edit', redirectTo: '' },\n          { path: 'preview', redirectTo: '' },\n        ]),\n      ],\n    });\n    service = TestBed.inject(TrainingDefinitionConcreteService);\n  });\n\n  it('should be created', () => {\n    expect(service).toBeTruthy();\n  });\n\n  it('should get all training definitions', (done) => {\n    apiSpy.getAll.and.returnValue(asyncData(createPaginatedMock()));\n    service.getAll(createPagination(), 'filter').subscribe(\n      (res) => {\n        expect(res).toBeTruthy();\n        expect(res).toEqual(createPaginatedMock());\n        done();\n      },\n      () => fail\n    );\n    expect(apiSpy.getAll).toHaveBeenCalledTimes(1);\n    expect(apiSpy.getAll).toHaveBeenCalledWith(createPagination(), [new SentinelFilter('title', 'filter')]);\n  });\n\n  it('should emit error when get all training definitions fails', (done) => {\n    apiSpy.getAll.and.returnValue(throwError(null));\n    service.getAll(createPagination(), 'filter').subscribe(\n      () => fail,\n      () => {\n        expect(errorHandlerSpy.emit).toHaveBeenCalledTimes(1);\n        done();\n      }\n    );\n    expect(apiSpy.getAll).toHaveBeenCalledTimes(1);\n    expect(apiSpy.getAll).toHaveBeenCalledWith(createPagination(), [new SentinelFilter('title', 'filter')]);\n  });\n\n  it('should redirects to training definition creation page', (done) => {\n    navigatorSpy.toNewTrainingDefinition.and.returnValue('create');\n    service.create().subscribe(\n      () => done(),\n      () => fail\n    );\n    expect(navigatorSpy.toNewTrainingDefinition).toHaveBeenCalledTimes(1);\n  });\n\n  it('should redirects to training definition edit page', (done) => {\n    navigatorSpy.toTrainingDefinitionEdit.and.returnValue('edit');\n    service.edit(new TrainingDefinition()).subscribe(\n      () => done(),\n      () => fail\n    );\n    expect(navigatorSpy.toTrainingDefinitionEdit).toHaveBeenCalledTimes(1);\n  });\n\n  it('should redirects to training definition preview page', (done) => {\n    navigatorSpy.toTrainingDefinitionPreview.and.returnValue('preview');\n    service.preview(new TrainingDefinition()).subscribe(\n      () => done(),\n      () => fail\n    );\n    expect(navigatorSpy.toTrainingDefinitionPreview).toHaveBeenCalledTimes(1);\n  });\n\n  it('should delete level', (done) => {\n    apiSpy.delete.and.returnValue(asyncData(null));\n    apiSpy.getAll.and.returnValue(asyncData(createPaginatedMock()));\n    const dialogRefSpyObj = jasmine.createSpyObj({ afterClosed: of(SentinelDialogResultEnum.CONFIRMED), close: null });\n    dialogSpy.open.and.returnValue(dialogRefSpyObj);\n    service.delete(createMock()[1]).subscribe(\n      (res) => {\n        expect(apiSpy.delete).toHaveBeenCalledTimes(1);\n        expect(notificationSpy.emit).toHaveBeenCalledTimes(1);\n        expect(notificationSpy.emit).toHaveBeenCalledWith('success', jasmine.anything());\n        expect(res).toEqual(createPaginatedMock());\n        done();\n      },\n      () => fail\n    );\n  });\n\n  it('should emit error when delete level fails', (done) => {\n    apiSpy.delete.and.returnValue(throwError(null));\n    apiSpy.getAll.and.returnValue(asyncData(createPaginatedMock()));\n    const dialogRefSpyObj = jasmine.createSpyObj({ afterClosed: of(SentinelDialogResultEnum.CONFIRMED), close: null });\n    dialogSpy.open.and.returnValue(dialogRefSpyObj);\n    service.delete(createMock()[1]).subscribe(\n      () => fail,\n      (err) => {\n        expect(apiSpy.delete).toHaveBeenCalledTimes(1);\n        expect(errorHandlerSpy.emit).toHaveBeenCalledTimes(1);\n        expect(errorHandlerSpy.emit).toHaveBeenCalledWith(err, jasmine.anything());\n        done();\n      }\n    );\n  });\n\n  it('should clone training definition', (done) => {\n    apiSpy.clone.and.returnValue(asyncData(1));\n    apiSpy.getAll.and.returnValue(asyncData(createPaginatedMock()));\n    const trainingDefinition = createMock()[1];\n    const dialogRefSpyObj = jasmine.createSpyObj({ afterClosed: of(trainingDefinition), close: null });\n    dialogSpy.open.and.returnValue(dialogRefSpyObj);\n    service.clone(createMock()[1]).subscribe(\n      (res) => {\n        expect(apiSpy.clone).toHaveBeenCalledTimes(1);\n        expect(notificationSpy.emit).toHaveBeenCalledTimes(1);\n        expect(notificationSpy.emit).toHaveBeenCalledWith('success', jasmine.anything());\n        expect(res).toEqual(createPaginatedMock());\n        done();\n      },\n      () => fail\n    );\n  });\n\n  it('should emit error when clone training definition fails', (done) => {\n    apiSpy.clone.and.returnValue(throwError(null));\n    apiSpy.getAll.and.returnValue(asyncData(createPaginatedMock()));\n    const trainingDefinition = createMock()[1];\n    const dialogRefSpyObj = jasmine.createSpyObj({ afterClosed: of(trainingDefinition), close: null });\n    dialogSpy.open.and.returnValue(dialogRefSpyObj);\n    service.clone(trainingDefinition).subscribe(\n      () => fail,\n      (err) => {\n        expect(apiSpy.clone).toHaveBeenCalledTimes(1);\n        expect(errorHandlerSpy.emit).toHaveBeenCalledTimes(1);\n        expect(errorHandlerSpy.emit).toHaveBeenCalledWith(err, jasmine.anything());\n        done();\n      }\n    );\n  });\n\n  it('should emit error when download training definition fails', (done) => {\n    apiSpy.download.and.returnValue(throwError(null));\n    const trainingDefinition = createMock()[1];\n    service.download(trainingDefinition).subscribe(\n      () => fail,\n      (err) => {\n        expect(apiSpy.download).toHaveBeenCalledTimes(1);\n        expect(errorHandlerSpy.emit).toHaveBeenCalledTimes(1);\n        expect(errorHandlerSpy.emit).toHaveBeenCalledWith(err, jasmine.anything());\n        done();\n      }\n    );\n  });\n\n  it('should change state of training definition', (done) => {\n    apiSpy.changeState.and.returnValue(asyncData(1));\n    const trainingDefinition = createMock()[1];\n    const dialogRefSpyObj = jasmine.createSpyObj({ afterClosed: of(SentinelDialogResultEnum.CONFIRMED), close: null });\n    dialogSpy.open.and.returnValue(dialogRefSpyObj);\n    service.changeState(trainingDefinition, TrainingDefinitionStateEnum.Archived).subscribe(\n      (res) => {\n        expect(apiSpy.changeState).toHaveBeenCalledTimes(1);\n        expect(apiSpy.changeState).toHaveBeenCalledWith(1, TrainingDefinitionStateEnum.Archived);\n        expect(res).toEqual(1);\n        done();\n      },\n      () => fail\n    );\n  });\n\n  it('should emit error when change state of training definition fails', (done) => {\n    apiSpy.changeState.and.returnValue(throwError(null));\n    const trainingDefinition = createMock()[1];\n    const dialogRefSpyObj = jasmine.createSpyObj({ afterClosed: of(SentinelDialogResultEnum.CONFIRMED), close: null });\n    dialogSpy.open.and.returnValue(dialogRefSpyObj);\n    service.changeState(trainingDefinition, TrainingDefinitionStateEnum.Archived).subscribe(\n      () => fail,\n      (err) => {\n        expect(errorHandlerSpy.emit).toHaveBeenCalledTimes(1);\n        expect(errorHandlerSpy.emit).toHaveBeenCalledWith(err, jasmine.anything());\n        done();\n      }\n    );\n  });\n\n  function createMock(): TrainingDefinition[] {\n    const def1 = new TrainingDefinition();\n    def1.id = 0;\n    def1.title = 'Def1';\n    def1.state = TrainingDefinitionStateEnum.Released;\n    const def2 = new TrainingDefinition();\n    def2.id = 1;\n    def2.title = 'Def2';\n    def2.state = TrainingDefinitionStateEnum.Released;\n    const def3 = new TrainingDefinition();\n    def3.id = 2;\n    def3.title = 'Def3';\n    def3.state = TrainingDefinitionStateEnum.Released;\n\n    return [def1, def2, def3];\n  }\n\n  function createPaginatedMock(): PaginatedResource<TrainingDefinition> {\n    return new PaginatedResource<TrainingDefinition>(createMock(), new SentinelPagination(1, 3, 3, 3, 1));\n  }\n\n  function createPagination() {\n    return new RequestedPagination(1, 3, '', '');\n  }\n});\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}