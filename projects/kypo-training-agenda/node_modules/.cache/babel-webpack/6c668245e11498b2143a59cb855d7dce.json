{"ast":null,"code":"import { CloneDialogComponent } from './clone-dialog.component';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { TestBed, async } from '@angular/core/testing';\nimport { TrainingDefinitionEditOverviewMaterialModule } from '../../../../definition-edit/src/components/training-definition-edit-overview-material.module';\nimport { TrainingDefinition, GameLevel, AssessmentLevel, InfoLevel } from '@muni-kypo-crp/training-model';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { SentinelPipesModule } from '@sentinel/common';\nimport { createDialogRefSpy } from '../../../../internal/src/testing/testing-commons.spec';\ndescribe('CloneDialogComponent', () => {\n  let component;\n  let fixture;\n  let matDialogRefSpy;\n  beforeEach(async(() => {\n    matDialogRefSpy = createDialogRefSpy();\n    TestBed.configureTestingModule({\n      imports: [TrainingDefinitionEditOverviewMaterialModule, SentinelPipesModule, BrowserAnimationsModule],\n      declarations: [CloneDialogComponent],\n      providers: [{\n        provide: MatDialogRef,\n        useValue: matDialogRefSpy\n      }, {\n        provide: MAT_DIALOG_DATA,\n        useValue: createMock()\n      }]\n    }).compileComponents();\n  }));\n  beforeEach(() => {\n    fixture = TestBed.createComponent(CloneDialogComponent);\n    component = fixture.componentInstance;\n    fixture.detectChanges();\n  });\n  it('should create', () => {\n    expect(component).toBeTruthy();\n  });\n  it('should init values', () => {\n    expect(component.cloneDialogFormGroup).toBeTruthy();\n    expect(component.clonedDefinitionTitle).toBeTruthy();\n    expect(component.valid).toBeTrue();\n  });\n  it('should close dialog with confirm result', () => {\n    component.confirm();\n    expect(matDialogRefSpy.close).toHaveBeenCalledTimes(1);\n    expect(matDialogRefSpy.close).toHaveBeenCalledWith({\n      title: jasmine.anything()\n    });\n  });\n  it('should close dialog with no result', () => {\n    component.cancel();\n    expect(matDialogRefSpy.close).toHaveBeenCalledTimes(1);\n  });\n\n  function createMock() {\n    const td = new TrainingDefinition();\n    td.id = 2;\n    td.title = 'TD 2';\n    td.levels = createLevelsMock();\n    td.description = '';\n    td.prerequisites = [];\n    return td;\n  }\n\n  function createLevelsMock() {\n    const level1 = new GameLevel();\n    const level2 = new AssessmentLevel();\n    const level3 = new InfoLevel();\n    return [level1, level2, level3];\n  }\n});","map":{"version":3,"sources":["/home/dominik/Desktop/Workspace/FRONTEND/kypo-training-agenda/projects/kypo-training-agenda/definition-overview/src/components/clone-dialog/clone-dialog.component.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import { CloneDialogComponent } from './clone-dialog.component';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { ComponentFixture, TestBed, async } from '@angular/core/testing';\nimport { TrainingDefinitionEditOverviewMaterialModule } from '../../../../definition-edit/src/components/training-definition-edit-overview-material.module';\nimport { TrainingDefinition, Level, GameLevel, AssessmentLevel, InfoLevel } from '@muni-kypo-crp/training-model';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { SentinelPipesModule } from '@sentinel/common';\nimport { createDialogRefSpy } from '../../../../internal/src/testing/testing-commons.spec';\n\ndescribe('CloneDialogComponent', () => {\n  let component: CloneDialogComponent;\n  let fixture: ComponentFixture<CloneDialogComponent>;\n  let matDialogRefSpy: jasmine.SpyObj<MatDialogRef<CloneDialogComponent>>;\n\n  beforeEach(async(() => {\n    matDialogRefSpy = createDialogRefSpy();\n    TestBed.configureTestingModule({\n      imports: [TrainingDefinitionEditOverviewMaterialModule, SentinelPipesModule, BrowserAnimationsModule],\n      declarations: [CloneDialogComponent],\n      providers: [\n        { provide: MatDialogRef, useValue: matDialogRefSpy },\n        {\n          provide: MAT_DIALOG_DATA,\n          useValue: createMock(),\n        },\n      ],\n    }).compileComponents();\n  }));\n\n  beforeEach(() => {\n    fixture = TestBed.createComponent(CloneDialogComponent);\n    component = fixture.componentInstance;\n    fixture.detectChanges();\n  });\n\n  it('should create', () => {\n    expect(component).toBeTruthy();\n  });\n\n  it('should init values', () => {\n    expect(component.cloneDialogFormGroup).toBeTruthy();\n    expect(component.clonedDefinitionTitle).toBeTruthy();\n    expect(component.valid).toBeTrue();\n  });\n\n  it('should close dialog with confirm result', () => {\n    component.confirm();\n    expect(matDialogRefSpy.close).toHaveBeenCalledTimes(1);\n    expect(matDialogRefSpy.close).toHaveBeenCalledWith({ title: jasmine.anything() });\n  });\n\n  it('should close dialog with no result', () => {\n    component.cancel();\n    expect(matDialogRefSpy.close).toHaveBeenCalledTimes(1);\n  });\n\n  function createMock(): TrainingDefinition {\n    const td = new TrainingDefinition();\n    td.id = 2;\n    td.title = 'TD 2';\n    td.levels = createLevelsMock();\n    td.description = '';\n    td.prerequisites = [];\n    return td;\n  }\n\n  function createLevelsMock(): Level[] {\n    const level1 = new GameLevel();\n    const level2 = new AssessmentLevel();\n    const level3 = new InfoLevel();\n    return [level1, level2, level3];\n  }\n});\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}